(()=>{"use strict";const e=(()=>{let e=[];return{addToList:function(t){e.push(t),console.log(e)},TodoList:e}})(),t=(e,t,n)=>({title:e,taskList:t,id:n}),n=(()=>{let n,o=[],r=e.TodoList;const c=t("General",r,0);o.push(c);let i=0;return{submitProject:function(){document.querySelector("#createProject").addEventListener("click",(e=>{e.preventDefault(),function(){n=document.querySelector("#projectTitle").value;const e=0===o.length?0:o[o.length-1].id+1;if(""!==n){const r=t(n,[],e);console.log(r),function(e){o.push(e),console.log(o)}(r)}}(),""!==n&&(s.displayProject(),document.querySelector("#projectTitle").value="",n="")}))},grabProjectId:function(e){let t=parseInt(e.target.getAttribute("data-projectId"));return i=t,i},grabCurrentProject:function(){return i},grabProjectList:function(){return o},projectList:o}})();function o(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}function r(e){const t=o(e);return t.setHours(0,0,0,0),t}function c(e){return t=e,n=Date.now(),+r(t)==+r(n);var t,n}let i={};function l(){return i}function d(e,t){const n=l(),r=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,c=o(e),i=c.getDay(),d=(i<r?7:0)+i-r;return c.setDate(c.getDate()-d),c.setHours(0,0,0,0),c}function u(e,t){return function(e,t,n){return+d(e,n)==+d(t,n)}(e,Date.now(),t)}const a=(()=>{function e(e,t){const n=document.createElement("div");n.setAttribute("data-taskId",`${e.id}`);const o=document.createElement("div"),r=document.createElement("div"),c=document.createElement("div"),i=document.createElement("div");return o.textContent=`Title: ${e.title}`,r.textContent=`Due Date: ${e.duedate}`,c.textContent=`Description: ${e.description}`,i.textContent=`Priority: ${e.priority}`,n.append(o,r,c,i),t.appendChild(n),t}return{displayNewInput:function(){let t=n.projectList[0].taskList;e(t[t.length-1],document.querySelector("#general"))},displayInbox:function(){let t=n.projectList[0].taskList;const o=document.querySelector("#general");for(;o.lastElementChild;)o.removeChild(o.lastElementChild);t.forEach((t=>e(t,o)))},displayDaily:function(){let t=n.projectList[0].taskList;const r=document.querySelector("#general");for(;r.lastElementChild;)r.removeChild(r.lastElementChild);t.filter((e=>c(o(e.duedate)))).forEach((t=>e(t,r)))},displayWeekly:function(){let t=n.projectList[0].taskList;const r=document.querySelector("#general");for(;r.lastElementChild;)r.removeChild(r.lastElementChild);t.filter((e=>u(o(e.duedate)))).forEach((t=>e(t,r)))},displayAllTask:e}})(),s={displayProject:function(){let e=n.projectList,t=e[e.length-1];const o=document.querySelector(".all-projects"),r=document.createElement("div"),c=document.createElement("div"),i=document.createElement("button");return r.classList.add(`project-${t.id}`),r.setAttribute("data-projectId",`${t.id}`),i.setAttribute("data-projectId",`${t.id}`),i.setAttribute("id",`project-${t.id}`),c.textContent=`${t.title}`,i.textContent="+",r.addEventListener("click",(e=>{e.stopPropagation(),function(e){let t=n.projectList;const o=document.querySelector("#general");for(;o.lastElementChild;)o.removeChild(o.lastElementChild);let r=t.filter((t=>t.id===e))[0].taskList;console.log(r),r.forEach((e=>a.displayAllTask(e,o)))}(t.id)})),i.addEventListener("click",(e=>{e.stopPropagation(),console.log("project id",n.grabProjectId(e));const t=document.querySelector("#main-form");n.grabProjectId(e),t.removeAttribute("hidden"),e.preventDefault()})),r.append(c,i),o.appendChild(r),o}},m=(()=>{let t,r;function i(){const i=n.grabProjectList();t=document.getElementById("title").value,r=document.getElementById("description").value;let l=document.getElementById("date").value,d=document.getElementById("priority").value,a=function(){let t=e.TodoList;return 0===t.length?0:t[t.length-1].id+1}(),s=n.grabCurrentProject();if(console.log(u(o(l))),console.log(c(o(l))),""!==t&&""!==r&&""!==l){const n=((e,t,n,o,r,c)=>({id:e,title:t,description:n,duedate:o,priority:r,project:c}))(a,t,r,l,d,s);console.log(n),0===s&&(i[0].taskList.push(n),console.log(i));for(let t=1;t<i.length;t++)i[t].id===s&&(e.addToList(n),i[t].taskList.push(n),console.log(i))}}function l(){document.getElementById("title").value="",t="",document.getElementById("description").value="",r="",document.getElementById("date").value="",document.getElementById("priority").value="Low"}return{createNewTask:i,initSubmitBtn:function(){document.querySelector("#submit").addEventListener("click",(e=>{!function(){const e=document.querySelector("#main-form"),n=document.querySelector("#newTask");i(),""!==t&&""!==r&&(a.displayNewInput(),l(),e.setAttribute("hidden",""),n.removeAttribute("hidden"))}(),e.preventDefault()}))},cancelTask:function(){const e=document.querySelector("#cancel"),t=document.querySelector("#main-form"),n=document.querySelector("#newTask");e.addEventListener("click",(e=>{l(),t.setAttribute("hidden",""),n.removeAttribute("hidden"),e.preventDefault()}))},openTaskCreator:function(){const e=document.querySelector("#newTask"),t=document.querySelector("#main-form");e.addEventListener("click",(o=>{n.grabProjectId(o),t.removeAttribute("hidden"),e.setAttribute("hidden",""),o.preventDefault()}))}}})();m.initSubmitBtn(),m.cancelTask(),m.openTaskCreator(),n.submitProject();const p=document.querySelector("#today"),y=document.querySelector("#weekly"),f=document.querySelector("#inbox");p.addEventListener("click",a.displayDaily),y.addEventListener("click",a.displayWeekly),f.addEventListener("click",a.displayInbox)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,