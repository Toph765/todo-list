(()=>{"use strict";const e=(()=>{let e=[];return{addToList:function(t){e.push(t),console.log(e)},TodoList:e,removeTask:function(t){return e=e.filter((e=>t!==e.id))}}})(),t=(e,t,n)=>({title:e,taskList:t,id:n}),n=(()=>{let n,o=[],r=e.TodoList;const c=t("General",r,0);o.push(c);let i=0;return{submitProject:function(){document.querySelector("#createProject").addEventListener("click",(e=>{if(e.preventDefault(),function(){n=document.querySelector("#projectTitle").value;const e=0===o.length?0:o[o.length-1].id+1;if(""!==n){const r=t(n,[],e);console.log(r),function(e){o.push(e),console.log(o)}(r)}}(),""!==n){let e=o[o.length-1];u.displayProject(e),document.querySelector("#projectTitle").value="",n=""}}))},grabProjectId:function(e){let t=parseInt(e.target.getAttribute("data-projectId"));return i=t,i},grabCurrentProject:function(){return i},grabProjectList:function(){return o},projectList:o,updateGeneralList:function(e){return c.taskList=e,console.log(c.taskList),c},updateProjectList:function(e){let t=c.taskList.filter((t=>t.project===e));return console.log(t),0!==e?o.filter((t=>t.id===e))[0].taskList=t:void 0},grabCurrentProjectTasks:function(e){return console.log(o.filter((t=>t.id===e))[0].taskList),o.filter((t=>t.id===e))[0].taskList},removeProject:function(e){return console.log("before",o),o=o.filter((t=>t.id!==e)),console.log("after",o),o}}})();function o(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}function r(e){const t=o(e);return t.setHours(0,0,0,0),t}function c(e){return t=e,n=Date.now(),+r(t)==+r(n);var t,n}let i={};function l(){return i}function a(e,t){const n=l(),r=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,c=o(e),i=c.getDay(),a=(i<r?7:0)+i-r;return c.setDate(c.getDate()-a),c.setHours(0,0,0,0),c}function s(e,t){return function(e,t,n){return+a(e,n)==+a(t,n)}(e,Date.now(),t)}const d=(()=>{function t(t,o){const c=document.createElement("div");c.setAttribute("data-taskId",`${t.id}`),c.classList.add("task");const i=document.createElement("div"),l=document.createElement("div"),a=document.createElement("div"),s=document.createElement("div"),d=document.createElement("button");return i.textContent=`Title: ${t.title}`,l.textContent=`Due Date: ${t.duedate}`,a.textContent=`Description: ${t.description}`,s.textContent=`Priority: ${t.priority}`,d.textContent="delete",d.setAttribute("data-taskId",`${t.id}`),d.addEventListener("click",(()=>function(t,o){let c=e.removeTask(t);const i=document.querySelector("#general");for(n.updateGeneralList(c),n.updateProjectList(o);i.lastElementChild;)i.removeChild(i.lastElementChild);r(o),console.log(n.projectList),console.log(o)}(t.id,t.project))),c.append(i,l,a,s,d),o.appendChild(c),o}function r(e){let t=document.querySelector("#general").getAttribute("class");"inboxTab"===t?i():"todayTab"===t?l():"weekTab"===t?a():t===`project-${e}`&&0!==e&&u.displayProjectTasks(e)}function i(){let e=n.projectList[0].taskList;const o=document.querySelector("#general");for(o.classList.replace(o.getAttribute("class"),"inboxTab");o.lastElementChild;)o.removeChild(o.lastElementChild);e.forEach((e=>t(e,o))),console.log(e)}function l(){let e=n.projectList[0].taskList;const r=document.querySelector("#general");for(r.classList.replace(r.getAttribute("class"),"todayTab");r.lastElementChild;)r.removeChild(r.lastElementChild);e.filter((e=>c(o(e.duedate)))).forEach((e=>t(e,r)))}function a(){let e=n.projectList[0].taskList;const r=document.querySelector("#general");for(r.classList.replace(r.getAttribute("class"),"weekTab");r.lastElementChild;)r.removeChild(r.lastElementChild);e.filter((e=>s(o(e.duedate)))).forEach((e=>t(e,r)))}return{displayInbox:i,displayDaily:l,displayWeekly:a,displayAllTask:t,updateDisplay:r}})(),u=(()=>{function t(e){n.projectList;const t=document.querySelector("#general");for(t.classList.replace(t.getAttribute("class"),`project-${e}`);t.lastElementChild;)t.removeChild(t.lastElementChild);n.grabCurrentProjectTasks(e).forEach((e=>d.displayAllTask(e,t)))}return{displayProject:function o(r){const c=document.querySelector(".all-projects"),i=document.createElement("div"),l=document.createElement("div"),a=document.createElement("button"),s=document.createElement("button");return i.classList.add(`project-${r.id}`),i.setAttribute("data-projectId",`${r.id}`),a.setAttribute("data-projectId",`${r.id}`),a.setAttribute("id",`project-${r.id}`),l.textContent=`${r.title}`,a.textContent="+",s.textContent="delete",i.addEventListener("click",(e=>{e.stopPropagation(),t(r.id)})),a.addEventListener("click",(e=>{e.stopPropagation(),console.log("project id",n.grabProjectId(e));const t=document.querySelector("#main-form");n.grabProjectId(e),t.removeAttribute("hidden"),e.preventDefault()})),s.addEventListener("click",(t=>{t.stopPropagation(),function(t){n.removeProject(t);let r=n.grabProjectList();e.TodoList.filter((e=>e.project===t)).forEach((t=>{let o=e.removeTask(t.id);n.updateGeneralList(o)}));let c=document.querySelector(".all-projects");for(;c.lastElementChild;)c.removeChild(c.lastElementChild);r.forEach((e=>{e.id>0&&o(e)})),d.updateDisplay(t)}(r.id)})),i.append(l,a,s),c.appendChild(i),c},displayProjectTasks:t}})(),m=(()=>{let t,r;function i(){const i=n.grabProjectList();t=document.getElementById("title").value,r=document.getElementById("description").value;let l=document.getElementById("date").value,a=document.getElementById("priority").value,d=function(){let e=n.projectList[0].taskList;return 0===e.length?0:e[e.length-1].id+1}(),u=n.grabCurrentProject();if(console.log(s(o(l))),console.log(c(o(l))),""!==t&&""!==r&&""!==l){const n=((e,t,n,o,r,c)=>({id:e,title:t,description:n,duedate:o,priority:r,project:c}))(d,t,r,l,a,u);console.log(n),0===u&&(i[0].taskList.push(n),console.log(i));for(let t=1;t<i.length;t++)i[t].id===u&&(e.addToList(n),i[t].taskList.push(n),console.log(i))}}function l(){document.getElementById("title").value="",t="",document.getElementById("description").value="",r="",document.getElementById("date").value="",document.getElementById("priority").value="Low"}return{createNewTask:i,initSubmitBtn:function(){document.querySelector("#submit").addEventListener("click",(e=>{!function(){const e=document.querySelector("#main-form"),o=document.querySelector("#newTask");if(i(),""!==t&&""!==r){let t=n.projectList[0].taskList,r=t[t.length-1].project;d.updateDisplay(r),l(),e.setAttribute("hidden",""),o.removeAttribute("hidden")}}(),e.preventDefault()}))},cancelTask:function(){const e=document.querySelector("#cancel"),t=document.querySelector("#main-form"),n=document.querySelector("#newTask");e.addEventListener("click",(e=>{l(),t.setAttribute("hidden",""),n.removeAttribute("hidden"),e.preventDefault()}))},openTaskCreator:function(){const e=document.querySelector("#newTask"),t=document.querySelector("#main-form");e.addEventListener("click",(o=>{n.grabProjectId(o),t.removeAttribute("hidden"),e.setAttribute("hidden",""),o.preventDefault()}))}}})();m.initSubmitBtn(),m.cancelTask(),m.openTaskCreator(),n.submitProject();const p=document.querySelector("#today"),f=document.querySelector("#weekly"),g=document.querySelector("#inbox");p.addEventListener("click",d.displayDaily),f.addEventListener("click",d.displayWeekly),g.addEventListener("click",d.displayInbox)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,