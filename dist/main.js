(()=>{"use strict";const e=(()=>{let e=[];return{addToList:function(t){e.push(t),console.log(e)},TodoList:e,removeTask:function(t){return e=e.filter((e=>t!==e.id))}}})(),t=function(){const e=r.grabProjectList();var t;localStorage.setItem("project",(t=e,JSON.stringify(t))),console.log(JSON.parse(localStorage.getItem("project")))},o=function(){const t=JSON.parse(localStorage.getItem("project"));t[0].taskList.forEach((t=>{e.addToList(t),m.updateDisplay(t.project)})),t.filter((e=>0!==e.id)).forEach((e=>{r.addToProjectList(e),p.displayProject(e)}))},n=(e,t,o)=>({title:e,taskList:t,id:o}),r=(()=>{let o,r=[],c=e.TodoList;const i=n("General",c,0);r.push(i);let l=0;function a(e){r.push(e),console.log(r)}return{submitProject:function(){document.querySelector("#createProject").addEventListener("click",(e=>{if(e.preventDefault(),function(){o=document.querySelector("#projectTitle").value;const e=0===r.length?0:r[r.length-1].id+1;if(""!==o){const r=n(o,[],e);console.log(r),a(r),t()}}(),""!==o){let e=r[r.length-1];p.displayProject(e),document.querySelector("#projectTitle").value="",o=""}}))},grabProjectId:function(e){let t=parseInt(e.target.getAttribute("data-projectId"));return l=t,l},grabCurrentProject:function(){return l},grabProjectList:function(){return r},projectList:r,updateGeneralList:function(e){return i.taskList=e,console.log(i.taskList),i},updateProject:function(e){let t=i.taskList.filter((t=>t.project===e));return console.log(t),0!==e?r.filter((t=>t.id===e))[0].taskList=t:void 0},grabCurrentProjectTasks:function(e){return console.log(r.filter((t=>t.id===e))[0].taskList),r.filter((t=>t.id===e))[0].taskList},removeProject:function(e){return console.log("before",r),r=r.filter((t=>t.id!==e)),console.log("after",r),r},addToProjectList:a}})();function c(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}function i(e){const t=c(e);return t.setHours(0,0,0,0),t}function l(e){return t=e,o=Date.now(),+i(t)==+i(o);var t,o}let a={};function s(){return a}function d(e,t){const o=s(),n=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,r=c(e),i=r.getDay(),l=(i<n?7:0)+i-n;return r.setDate(r.getDate()-l),r.setHours(0,0,0,0),r}function u(e,t){return function(e,t,o){return+d(e,o)==+d(t,o)}(e,Date.now(),t)}const m=(()=>{function o(o,n){const c=document.createElement("div");c.setAttribute("data-taskId",`${o.id}`),c.classList.add("task");const l=document.createElement("div"),a=document.createElement("div"),s=document.createElement("div"),d=document.createElement("div"),u=document.createElement("button");return l.textContent=`Title: ${o.title}`,a.textContent=`Due Date: ${o.duedate}`,s.textContent=`Description: ${o.description}`,d.textContent=`Priority: ${o.priority}`,u.textContent="delete",u.setAttribute("data-taskId",`${o.id}`),u.addEventListener("click",(()=>function(o,n){let c=e.removeTask(o);const l=document.querySelector("#general");for(r.updateGeneralList(c),r.updateProject(n),t();l.lastElementChild;)l.removeChild(l.lastElementChild);i(n),console.log(r.projectList),console.log(n)}(o.id,o.project))),c.append(l,a,s,d,u),n.appendChild(c),n}function n(){return document.querySelector("#general").getAttribute("class")}function i(e){let t=n();"inboxTab"===t?a():"todayTab"===t?s():"weekTab"===t?d():t===`${e}`&&0!==e&&p.displayProjectTasks(e)}function a(){let e=r.grabProjectList()[0].taskList;const t=document.querySelector("#general");for(t.classList.replace(t.getAttribute("class"),"inboxTab");t.lastElementChild;)t.removeChild(t.lastElementChild);console.log(e),e.forEach((e=>o(e,t))),console.log(r.projectList)}function s(){let e=r.grabProjectList()[0].taskList;const t=document.querySelector("#general");for(t.classList.replace(t.getAttribute("class"),"todayTab");t.lastElementChild;)t.removeChild(t.lastElementChild);e.filter((e=>l(c(e.duedate)))).forEach((e=>o(e,t)))}function d(){let e=r.grabProjectList()[0].taskList;const t=document.querySelector("#general");for(t.classList.replace(t.getAttribute("class"),"weekTab");t.lastElementChild;)t.removeChild(t.lastElementChild);e.filter((e=>u(c(e.duedate)))).forEach((e=>o(e,t)))}return{displayInbox:a,displayDaily:s,displayWeekly:d,displayAllTask:o,updateDisplay:i,grabTab:n}})(),p=(()=>{function o(e){r.projectList;const t=document.querySelector("#general");for(t.classList.replace(t.getAttribute("class"),`${e}`);t.lastElementChild;)t.removeChild(t.lastElementChild);r.grabCurrentProjectTasks(e).forEach((e=>m.displayAllTask(e,t)))}return{displayProject:function n(c){const i=document.querySelector(".all-projects"),l=document.createElement("div"),a=document.createElement("div"),s=document.createElement("button"),d=document.createElement("button");return l.classList.add(`project-${c.id}`),l.setAttribute("data-projectId",`${c.id}`),s.setAttribute("data-projectId",`${c.id}`),s.setAttribute("id",`project-${c.id}`),a.textContent=`${c.title}`,s.textContent="+",d.textContent="delete",l.addEventListener("click",(e=>{e.stopPropagation(),o(c.id)})),s.addEventListener("click",(e=>{e.stopPropagation(),console.log("project id",r.grabProjectId(e));const t=document.querySelector("#main-form");r.grabProjectId(e),t.removeAttribute("hidden"),e.preventDefault()})),d.addEventListener("click",(o=>{o.stopPropagation(),function(o){r.removeProject(o),console.log("del project",r.grabProjectList());let c=r.grabProjectList(),i=e.TodoList.filter((e=>e.project===o));console.log("updatedprojects",c),i.forEach((t=>{let o=e.removeTask(t.id);r.updateGeneralList(o)}));let l=document.querySelector(".all-projects");for(;l.lastElementChild;)l.removeChild(l.lastElementChild);c.forEach((e=>{e.id>0&&n(e)})),parseInt(m.grabTab(o))===o?m.displayInbox():m.updateDisplay(o),t()}(c.id)})),l.append(a,s,d),i.appendChild(l),i},displayProjectTasks:o}})(),f=(()=>{let o,n;function i(){const t=r.grabProjectList();o=document.getElementById("title").value,n=document.getElementById("description").value;let i=document.getElementById("date").value,a=document.getElementById("priority").value,s=function(){let e=r.grabProjectList()[0].taskList;return 0===e.length?0:e[e.length-1].id+1}(),d=r.grabCurrentProject();if(console.log(u(c(i))),console.log(l(c(i))),""!==o&&""!==n&&""!==i){const r=((e,t,o,n,r,c)=>({id:e,title:t,description:o,duedate:n,priority:r,project:c}))(s,o,n,i,a,d);console.log(r),0===d&&(t[0].taskList.push(r),console.log(t));for(let o=1;o<t.length;o++)t[o].id===d&&(e.addToList(r),t[o].taskList.push(r),console.log(t))}}function a(){document.getElementById("title").value="",o="",document.getElementById("description").value="",n="",document.getElementById("date").value="",document.getElementById("priority").value="Low"}return{createNewTask:i,initSubmitBtn:function(){document.querySelector("#submit").addEventListener("click",(e=>{!function(){const e=document.querySelector("#main-form"),c=document.querySelector("#newTask");if(i(),t(),""!==o&&""!==n){let t=r.grabProjectList()[0].taskList,o=t[t.length-1].project;m.updateDisplay(o),a(),e.setAttribute("hidden",""),c.removeAttribute("hidden")}}(),e.preventDefault()}))},cancelTask:function(){const e=document.querySelector("#cancel"),t=document.querySelector("#main-form"),o=document.querySelector("#newTask");e.addEventListener("click",(e=>{a(),t.setAttribute("hidden",""),o.removeAttribute("hidden"),e.preventDefault()}))},openTaskCreator:function(){const e=document.querySelector("#newTask"),t=document.querySelector("#main-form");e.addEventListener("click",(o=>{r.grabProjectId(o),t.removeAttribute("hidden"),e.setAttribute("hidden",""),o.preventDefault()}))}}})();f.initSubmitBtn(),f.cancelTask(),f.openTaskCreator(),r.submitProject();const g=document.querySelector("#today"),b=document.querySelector("#weekly"),y=document.querySelector("#inbox");g.addEventListener("click",m.displayDaily),b.addEventListener("click",m.displayWeekly),y.addEventListener("click",m.displayInbox),document.addEventListener("DOMContentLoaded",o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,