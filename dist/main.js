(()=>{"use strict";const e=(()=>{let e=[];return{addToList:function(t){e.push(t),console.log(e)},TodoList:e}})(),t=function(){let t=e.TodoList,n=t[t.length-1];const o=document.querySelector("main"),c=document.createElement("div");c.setAttribute("data-listId",`${n.id}`);const d=document.createElement("div"),i=document.createElement("div"),r=document.createElement("div"),u=document.createElement("div");return d.textContent=`Title: ${n.title}`,i.textContent=`Due Date: ${n.duedate}`,r.textContent=`Description: ${n.description}`,u.textContent=`Priority: ${n.priority}`,c.append(d,i,r,u),o.appendChild(c),o},n=(()=>{function n(){let t=document.getElementById("title").value,n=document.getElementById("description").value,o=document.getElementById("date").value,c=document.getElementById("priority").value;const d=((e,t,n,o,c,d)=>({id:e,title:t,description:n,duedate:o,priority:c,completed:!1}))(function(){let t=e.TodoList;return 0===t.length?0:t[t.length-1].id+1}(),t,n,o,c);console.log(d),e.addToList(d)}function o(){document.getElementById("title").value="",document.getElementById("description").value="",document.getElementById("date").value="",document.getElementById("priority").value="Low"}return{createNewTask:n,submitTask:function(){const e=document.querySelector("#submit"),c=document.querySelector("form"),d=document.querySelector("#newTask");e.addEventListener("click",(e=>{n(),t(),o(),c.setAttribute("hidden",""),d.removeAttribute("hidden"),e.preventDefault()}))},cancelTask:function(){const e=document.querySelector("#cancel"),t=document.querySelector("form"),n=document.querySelector("#newTask");e.addEventListener("click",(e=>{o(),t.setAttribute("hidden",""),n.removeAttribute("hidden"),e.preventDefault()}))},openTaskCreator:function(){const e=document.querySelector("#newTask"),t=document.querySelector("form");e.addEventListener("click",(n=>{t.removeAttribute("hidden"),e.setAttribute("hidden",""),n.preventDefault()}))}}})(),o=(()=>{let e=[];return{submitProject:function(){document.querySelector("#createProject").addEventListener("click",(t=>{(function(){const t={title:document.querySelector("#projectTitle").value,taskList:[],id:0===e.length?0:e[e.length-1].id+1};console.log(t),function(t){e.push(t),console.log(e)}(t)})(),t.preventDefault()}))}}})();n.submitTask(),n.cancelTask(),n.openTaskCreator(),o.submitProject()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,