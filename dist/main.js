(()=>{"use strict";const e=(()=>{let e=[];return{addToList:function(t){e.push(t),console.log(e)},TodoList:e}})(),t=(e,t,n)=>({title:e,taskList:t,id:n}),n=(()=>{let n=[],o=e.TodoList;const c=t("General",o,0);n.push(c);let i=0;return{submitProject:function(){document.querySelector("#createProject").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.querySelector("#projectTitle").value,o=0===n.length?0:n[n.length-1].id+1;if(""!==e){const r=t(e,[],o);console.log(r),function(e){n.push(e),console.log(n)}(r)}}(),1!==n.length&&r.displayProject()}))},grabProjectId:function(e){let t=e.target.getAttribute("data-projectId");return i=t,i},grabCurrentProject:function(){return i},projectList:n}})(),o=function(){let e=n.projectList[0].taskList,t=e[e.length-1];const o=document.querySelector("#general"),r=document.createElement("div");r.setAttribute("data-taskId",`${t.id}`);const c=document.createElement("div"),i=document.createElement("div"),d=document.createElement("div"),u=document.createElement("div");return c.textContent=`Title: ${t.title}`,i.textContent=`Due Date: ${t.duedate}`,d.textContent=`Description: ${t.description}`,u.textContent=`Priority: ${t.priority}`,r.append(c,i,d,u),o.appendChild(r),o},r={displayProject:function(){let e=n.projectList,t=e[e.length-1];const o=document.querySelector("#Allprojects"),r=document.createElement("div"),c=document.createElement("div"),i=document.createElement("button");return r.classList.add("project"),r.setAttribute("data-projectId",`${t.id}`),i.setAttribute("data-projectId",`${t.id}`),i.setAttribute("id",`project-${t.id}`),c.textContent=`${t.title}`,i.textContent="+",i.addEventListener("click",(e=>{console.log(n.grabProjectId(e))})),r.append(c,i),o.appendChild(r),o}},c=(()=>{function t(){let t=document.getElementById("title").value,o=document.getElementById("description").value,r=document.getElementById("date").value,c=document.getElementById("priority").value;const i=((e,t,n,o,r,c)=>({id:e,title:t,description:n,duedate:o,priority:r,project:c}))(function(){let t=e.TodoList;return 0===t.length?0:t[t.length-1].id+1}(),t,o,r,c,n.grabCurrentProject());console.log(i),e.addToList(i)}function r(){document.getElementById("title").value="",document.getElementById("description").value="",document.getElementById("date").value="",document.getElementById("priority").value="Low"}return{createNewTask:t,initSubmitBtn:function(){document.querySelector("#submit").addEventListener("click",(e=>{!function(){const e=document.querySelector("#main-form"),n=document.querySelector("#newTask");t(),o(),r(),e.setAttribute("hidden",""),n.removeAttribute("hidden")}(),e.preventDefault()}))},cancelTask:function(){const e=document.querySelector("#cancel"),t=document.querySelector("#main-form"),n=document.querySelector("#newTask");e.addEventListener("click",(e=>{r(),t.setAttribute("hidden",""),n.removeAttribute("hidden"),e.preventDefault()}))},openTaskCreator:function(){const e=document.querySelector("#newTask"),t=document.querySelector("#main-form");e.addEventListener("click",(o=>{n.grabProjectId(o),console.log(n.grabCurrentProject()),t.removeAttribute("hidden"),e.setAttribute("hidden",""),o.preventDefault()}))}}})();c.initSubmitBtn(),c.cancelTask(),c.openTaskCreator(),n.submitProject()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,