(()=>{"use strict";const t=(()=>{let t=[];return{addToList:function(e){t.push(e),console.log(t)},TodoList:t,removeTask:function(e){return t=t.filter((t=>e!==t.id))}}})(),e=function(){const t=r.grabProjectList();var e;localStorage.setItem("project",(e=t,JSON.stringify(e))),console.log(JSON.parse(localStorage.getItem("project")))},o=function(){const t=JSON.parse(localStorage.getItem("project"));t.filter((t=>0!==t.id)).forEach((t=>{t.taskList=[],r.addToProjectList(t),p.displayProject(t)})),t[0].taskList.forEach((t=>{f.addToTasklist(t.project,t),m.updateDisplay(t.project)}))},n=(t,e,o)=>({title:t,taskList:e,id:o}),r=(()=>{let o,r=[],i=t.TodoList;const l=n("General",i,0);r.push(l);let c=0;function a(t){r.push(t),console.log(r)}return{submitProject:function(){document.querySelector("#createProject").addEventListener("click",(t=>{if(t.preventDefault(),function(){o=document.querySelector("#projectTitle").value;const t=0===r.length?0:r[r.length-1].id+1;if(""!==o){const r=n(o,[],t);console.log(r),a(r),e()}}(),""!==o){let t=r[r.length-1];p.displayProject(t),document.querySelector("#projectTitle").value="",o=""}}))},grabProjectId:function(t){let e=parseInt(t.target.getAttribute("data-projectId"));return c=e,c},grabCurrentProject:function(){return c},grabProjectList:function(){return r},projectList:r,updateGeneralList:function(t){return l.taskList=t,console.log(l.taskList),l},updateProject:function(t){let e=l.taskList.filter((e=>e.project===t));return console.log(e),0!==t?r.filter((e=>e.id===t))[0].taskList=e:void 0},grabCurrentProjectTasks:function(t){return console.log(r.filter((e=>e.id===t))[0].taskList),r.filter((e=>e.id===t))[0].taskList},removeProject:function(t){return console.log("before",r),r=r.filter((e=>e.id!==t)),console.log("after",r),r},addToProjectList:a}})();function i(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function l(t){const e=i(t);return e.setHours(0,0,0,0),e}function c(t){return e=t,o=Date.now(),+l(e)==+l(o);var e,o}let a={};function s(){return a}function d(t,e){const o=s(),n=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,r=i(t),l=r.getDay(),c=(l<n?7:0)+l-n;return r.setDate(r.getDate()-c),r.setHours(0,0,0,0),r}function u(t,e){return function(t,e,o){return+d(t,o)==+d(e,o)}(t,Date.now(),e)}const m=(()=>{function o(o,i){const l=document.createElement("div");l.setAttribute("data-taskId",`${o.id}`),l.classList.add("task");const c=document.createElement("div"),s=document.createElement("div"),d=document.createElement("div"),u=document.createElement("div"),m=document.createElement("button"),p=document.createElement("button"),f=document.createElement("input"),g=document.createElement("label");return c.textContent=`Title: ${o.title}`,s.textContent=`Due Date: ${o.duedate}`,d.textContent=`Details: ${o.details}`,u.textContent=`Priority: ${o.priority}`,m.textContent="delete",p.textContent="edit",g.textContent="Done?",f.setAttribute("type","checkbox"),f.setAttribute("id",`status-${o.id}`),f.setAttribute("name","status"),f.setAttribute("value","off"),g.setAttribute("for",`status-${o.id}`),m.setAttribute("data-taskId",`${o.id}`),f.addEventListener("click",(()=>{"off"===f.value?n(o,f,g,p,l):function(t,e,o,n,r){o.textContent="Done?",e.value="off",n.removeAttribute("disabled"),t.status="unfinished",r.classList.remove("finished")}(o,f,g,p,l),e()})),m.addEventListener("click",(()=>function(o,n){let i=t.removeTask(o);const l=document.querySelector("#general");for(r.updateGeneralList(i),r.updateProject(n),e();l.lastElementChild;)l.removeChild(l.lastElementChild);a(n),console.log(r.projectList),console.log(n)}(o.id,o.project))),p.addEventListener("click",(()=>{!function(t){const e=document.querySelector("#main-form");e.classList.add("edit-mode"),e.setAttribute("data-taskId",`${t.id}`);let o=document.getElementById("title"),n=document.getElementById("details"),r=document.getElementById("date"),i=document.getElementById("priority");const l=t.title,c=t.details,a=t.duedate,s=t.priority;o.value=l,n.value=c,r.value=a,i.value=s,e.removeAttribute("hidden")}(o)})),"finished"===o.status&&(f.setAttribute("checked",""),n(o,f,g,p,l)),l.append(c,s,d,u,m,p,g,f),i.appendChild(l),i}function n(t,e,o,n,r){o.textContent="Done!",e.value="on",n.setAttribute("disabled",""),t.status="finished",r.classList.add("finished")}function l(){return document.querySelector("#general").getAttribute("class")}function a(t){let e=l();"inboxTab"===e?s():"todayTab"===e?d():"weekTab"===e?m():e===`${t}`&&0!==t&&p.displayProjectTasks(t)}function s(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),"inboxTab");e.lastElementChild;)e.removeChild(e.lastElementChild);console.log(t),t.forEach((t=>o(t,e))),console.log(r.projectList)}function d(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),"todayTab");e.lastElementChild;)e.removeChild(e.lastElementChild);t.filter((t=>c(i(t.duedate)))).forEach((t=>o(t,e)))}function m(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),"weekTab");e.lastElementChild;)e.removeChild(e.lastElementChild);t.filter((t=>u(i(t.duedate)))).forEach((t=>o(t,e)))}return{displayInbox:s,displayDaily:d,displayWeekly:m,displayAllTask:o,updateDisplay:a,grabTab:l}})(),p=(()=>{function o(t){r.projectList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),`${t}`);e.lastElementChild;)e.removeChild(e.lastElementChild);r.grabCurrentProjectTasks(t).forEach((t=>m.displayAllTask(t,e)))}return{displayProject:function n(i){const l=document.querySelector(".all-projects"),c=document.createElement("div"),a=document.createElement("div"),s=document.createElement("button"),d=document.createElement("button");return c.classList.add(`project-${i.id}`),c.classList.add("container-project"),c.setAttribute("data-projectId",`${i.id}`),s.setAttribute("data-projectId",`${i.id}`),s.setAttribute("id",`project-${i.id}`),d.classList.add("del-project"),a.textContent=`${i.title}`,s.textContent="+",d.textContent="delete",c.addEventListener("click",(t=>{t.stopPropagation(),o(i.id)})),s.addEventListener("click",(t=>{t.stopPropagation(),console.log("project id",r.grabProjectId(t));const e=document.querySelector("#main-form");r.grabProjectId(t),e.removeAttribute("hidden"),t.preventDefault()})),d.addEventListener("click",(o=>{o.stopPropagation(),function(o){r.removeProject(o);let i=r.grabProjectList();t.TodoList.filter((t=>t.project===o)).forEach((e=>{let o=t.removeTask(e.id);r.updateGeneralList(o)}));let l=document.querySelector(".all-projects");for(;l.lastElementChild;)l.removeChild(l.lastElementChild);i.forEach((t=>{t.id>0&&n(t)})),parseInt(m.grabTab(o))===o?m.displayInbox():m.updateDisplay(o),e()}(i.id)})),c.append(a,s,d),l.appendChild(c),l},displayProjectTasks:o}})(),f=(()=>{let o,n;function l(){r.grabProjectList(),o=document.getElementById("title").value,n=document.getElementById("details").value;let t=document.getElementById("date").value,e=document.getElementById("priority").value,l=function(){let t=r.grabProjectList()[0].taskList;return 0===t.length?0:t[t.length-1].id+1}(),s=r.grabCurrentProject();if(console.log(u(i(t))),console.log(c(i(t))),""===o||""===n||""===t)return;const d=((t,e,o,n,r,i,l)=>({id:t,title:e,details:o,duedate:n,priority:r,project:i,status:"unfinished"}))(l,o,n,t,e,s);console.log(d),a(s,d)}function a(e,o){const n=r.grabProjectList();0===e&&(n[0].taskList.push(o),console.log(n));for(let r=1;r<n.length;r++)n[r].id===e&&(t.addToList(o),n[r].taskList.push(o),console.log(n))}function s(){document.getElementById("title").value="",o="",document.getElementById("details").value="",n="",document.getElementById("date").value="",document.getElementById("priority").value="Low"}return{createNewTask:l,initSubmitBtn:function(){document.querySelector("#submit").addEventListener("click",(t=>{!function(){const t=document.querySelector("#main-form"),i=document.querySelector("#newTask"),c=parseInt(t.getAttribute("data-taskId"));if("edit-mode"===t.getAttribute("class")?(console.log("werk"),function(t){let e=document.getElementById("title").value,i=document.getElementById("details").value,l=document.getElementById("date").value,c=document.getElementById("priority").value;const a=r.grabProjectList()[0].taskList,s=a.filter((e=>t===e.id))[0];s.title=e,s.details=i,s.duedate=l,s.priority=c,o=e,n=i;for(let e=0;e<a.length;e++)a[e].id===t&&(a[e]=s,r.updateProject(a[e].project),console.log(r.grabProjectList()))}(c)):l(),e(),""===o||""===n)return;let a,d=r.grabProjectList()[0].taskList;"edit-mode"===t.getAttribute("class")?(a=d.filter((t=>c===t.id))[0].project,t.classList.remove("edit-mode")):a=d[d.length-1].project,m.updateDisplay(a),s(),t.setAttribute("hidden",""),i.removeAttribute("hidden")}(),t.preventDefault()}))},cancelTask:function(){const t=document.querySelector("#cancel"),e=document.querySelector("#main-form"),o=document.querySelector("#newTask");t.addEventListener("click",(t=>{s(),e.setAttribute("hidden",""),o.removeAttribute("hidden"),t.preventDefault()}))},openTaskCreator:function(){const t=document.querySelector("#newTask"),e=document.querySelector("#main-form");t.addEventListener("click",(o=>{r.grabProjectId(o),e.removeAttribute("hidden"),t.setAttribute("hidden",""),o.preventDefault()}))},addToTasklist:a}})();f.initSubmitBtn(),f.cancelTask(),f.openTaskCreator(),r.submitProject();const g=document.querySelector("#today"),b=document.querySelector("#weekly"),y=document.querySelector("#inbox");g.addEventListener("click",m.displayDaily),b.addEventListener("click",m.displayWeekly),y.addEventListener("click",m.displayInbox),document.addEventListener("DOMContentLoaded",o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QnZDLFdBQ0ksTUFBTUMsRUFBWWhILFNBQVNDLGNBQWMsV0FDbkMrRixFQUFjaEcsU0FBU0MsY0FBYyxjQUNyQ3lHLEVBQWExRyxTQUFTQyxjQUFjLFlBRTFDK0csRUFBVTlHLGlCQUFpQixTQUFVQyxJQUNqQ3FHLElBQ0FSLEVBQVl6QyxhQUFhLFNBQVUsSUFDbkNtRCxFQUFXdkMsZ0JBQWdCLFVBQzNCaEUsRUFBRUMsZ0JBQWdCLEdBRTFCLEVBY21ENkcsZ0JBWm5ELFdBQ0ksTUFBTVAsRUFBYTFHLFNBQVNDLGNBQWMsWUFDcEMrRixFQUFjaEcsU0FBU0MsY0FBYyxjQUUzQ3lHLEVBQVd4RyxpQkFBaUIsU0FBVUMsSUFDbEM3QixFQUFTbUMsY0FBY04sR0FDdkI2RixFQUFZN0IsZ0JBQWdCLFVBQzVCdUMsRUFBV25ELGFBQWEsU0FBVSxJQUNsQ3BELEVBQUVDLGdCQUFnQixHQUUxQixFQUVvRWIsZ0JBQ3ZFLEVBbktlLEdDUmhCRCxFQUFRbUgsZ0JBQ1JuSCxFQUFReUgsYUFDUnpILEVBQVEySCxrQkFFUjNJLEVBQVN5QixnQkFFVCxNQUFNbUgsRUFBV2xILFNBQVNDLGNBQWMsVUFDbENrSCxFQUFVbkgsU0FBU0MsY0FBYyxXQUNqQ21ILEVBQVdwSCxTQUFTQyxjQUFjLFVBRXhDaUgsRUFBU2hILGlCQUFpQixRQUFRVixFQUFXK0YsY0FDN0M0QixFQUFRakgsaUJBQWlCLFFBQVNWLEVBQVdnRyxlQUM3QzRCLEVBQVNsSCxpQkFBaUIsUUFBU1YsRUFBVzhGLGNBRTlDdEYsU0FBU0UsaUJBQWlCLG1CQUFvQjlCLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbWFuYWdlTGlzdC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbWFuYWdlUHJvamVjdC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvdG9EYXRlLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZkRheS5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzVG9kYXkubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc1NhbWVEYXkubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2RlZmF1bHRPcHRpb25zLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZldlZWsubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc1RoaXNXZWVrLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNTYW1lV2Vlay5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL1VJLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tYW5hZ2VUYXNrLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBZGR0b0xpc3QgPSAoKCkgPT4ge1xuICAgIGxldCBUb2RvTGlzdCA9IFtdO1xuXG4gICAgZnVuY3Rpb24gYWRkVG9MaXN0KHRhc2spIHtcbiAgICAgICAgVG9kb0xpc3QucHVzaCh0YXNrKTtcbiAgICAgICAgY29uc29sZS5sb2coVG9kb0xpc3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZVRhc2soaWQpIHtcbiAgICAgICAgcmV0dXJuIFRvZG9MaXN0ID0gVG9kb0xpc3QuZmlsdGVyKHRhc2sgPT4gaWQgIT09IHRhc2suaWQpO1xuICAgIH1cblxuICAgIHJldHVybiB7IGFkZFRvTGlzdCwgVG9kb0xpc3QsIHJlbW92ZVRhc2sgfTtcbn0pKClcblxuXG5leHBvcnQgeyBBZGR0b0xpc3QgfSIsImltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIi4vbWFuYWdlUHJvamVjdFwiO1xuaW1wb3J0IHsgcmVuZGVyUHJvamVjdCwgcmVuZGVyVGFzayB9IGZyb20gXCIuL1VJXCI7XG5pbXBvcnQgeyBOZXdUYXNrIH0gZnJvbSBcIi4vbWFuYWdlVGFza1wiO1xuXG5jb25zdCBzdG9yZUxvY2FsID0gKCgpID0+IHtcbiAgICBmdW5jdGlvbiBzdHJpbmdpZnkoaXRlbSkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoaXRlbSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RvcmVQcm9qZWN0cygpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdExpc3QgPSBwcm9qZWN0cy5ncmFiUHJvamVjdExpc3QoKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3QnLCBzdHJpbmdpZnkocHJvamVjdExpc3QpKTtcbiAgICAgICAgY29uc29sZS5sb2coSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdCcpKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZFN0b3JhZ2UoKSB7XG4gICAgICAgIGNvbnN0IG5ld0xpc3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9qZWN0JykpO1xuXG4gICAgICAgIGxldCBsb2FkZWRQcm9qZWN0cyA9IG5ld0xpc3QuZmlsdGVyKHByb2plY3QgPT4gcHJvamVjdC5pZCAhPT0gMCk7XG4gICAgICAgIGxvYWRlZFByb2plY3RzLmZvckVhY2gocHJvamVjdCA9PiB7XG4gICAgICAgICAgICBwcm9qZWN0LnRhc2tMaXN0ID0gW107XG4gICAgICAgICAgICBwcm9qZWN0cy5hZGRUb1Byb2plY3RMaXN0KHByb2plY3QpO1xuICAgICAgICAgICAgcmVuZGVyUHJvamVjdC5kaXNwbGF5UHJvamVjdChwcm9qZWN0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGdlbkxpc3QgPSBuZXdMaXN0WzBdO1xuXG4gICAgICAgIGdlbkxpc3QudGFza0xpc3QuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgICAgIE5ld1Rhc2suYWRkVG9UYXNrbGlzdCh0YXNrLnByb2plY3QsIHRhc2spO1xuICAgICAgICAgICAgcmVuZGVyVGFzay51cGRhdGVEaXNwbGF5KHRhc2sucHJvamVjdCk7XG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgIH1cblxuICAgIHJldHVybiB7IHN0b3JlUHJvamVjdHMsXG4gICAgICAgICAgICAgbG9hZFN0b3JhZ2UgfVxufSkoKTtcblxuZXhwb3J0IHtzdG9yZUxvY2FsfSIsImltcG9ydCB7IHJlbmRlclByb2plY3QgfSBmcm9tIFwiLi9VSVwiO1xuaW1wb3J0IHsgQWRkdG9MaXN0IH0gZnJvbSBcIi4vbWFuYWdlTGlzdFwiO1xuaW1wb3J0IHsgc3RvcmVMb2NhbCB9IGZyb20gXCIuL3N0b3JhZ2VcIjtcblxuY29uc3QgbmV3UHJvamVjdCA9ICh0aXRsZSwgdGFza0xpc3QsIGlkKSA9PiB7XG4gICAgcmV0dXJuIHsgdGl0bGUsIHRhc2tMaXN0LCBpZCB9O1xufVxuXG5jb25zdCBwcm9qZWN0cyA9ICgoKSA9PiB7XG4gICAgbGV0IHByb2plY3RUaXRsZVxuICAgIGxldCBwcm9qZWN0TGlzdCA9IFtdO1xuXG4gICAgbGV0IHRhc2tMaXN0ID0gQWRkdG9MaXN0LlRvZG9MaXN0O1xuXG4gICAgY29uc3QgZ2VuZXJhbExpc3QgPSBuZXdQcm9qZWN0KCdHZW5lcmFsJywgdGFza0xpc3QsIDApO1xuICAgIHByb2plY3RMaXN0LnB1c2goZ2VuZXJhbExpc3QpO1xuXG4gICAgbGV0IGN1cnJlbnRQcm9qZWN0ID0gMDtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUdlbmVyYWxMaXN0KG5ld0xpc3QpIHtcbiAgICAgICAgZ2VuZXJhbExpc3QudGFza0xpc3QgPSBuZXdMaXN0XG4gICAgICAgIGNvbnNvbGUubG9nKGdlbmVyYWxMaXN0LnRhc2tMaXN0KVxuICAgICAgICByZXR1cm4gZ2VuZXJhbExpc3RcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVQcm9qZWN0KGlkKSB7XG4gICAgICAgIGxldCB1cGRhdGUgPSBnZW5lcmFsTGlzdC50YXNrTGlzdC5maWx0ZXIodGFzayA9PiB0YXNrLnByb2plY3QgPT09IGlkKTtcbiAgICAgICAgY29uc29sZS5sb2codXBkYXRlKVxuICAgICAgICBpZiAoaWQgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9qZWN0TGlzdC5maWx0ZXIocHJvamVjdCA9PiBwcm9qZWN0LmlkID09PSBpZClbMF0udGFza0xpc3QgPSB1cGRhdGVcbiAgICAgICAgfSBlbHNlIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBncmFiQ3VycmVudFByb2plY3RUYXNrcyhpZCkge1xuICAgICAgICBjb25zb2xlLmxvZyhwcm9qZWN0TGlzdC5maWx0ZXIocHJvamVjdCA9PiBwcm9qZWN0LmlkID09PSBpZClbMF0udGFza0xpc3QpXG4gICAgICAgIHJldHVybiBwcm9qZWN0TGlzdC5maWx0ZXIocHJvamVjdCA9PiBwcm9qZWN0LmlkID09PSBpZClbMF0udGFza0xpc3RcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVQcm9qZWN0KGlkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdiZWZvcmUnLCBwcm9qZWN0TGlzdCk7XG4gICAgICAgIHByb2plY3RMaXN0ID0gcHJvamVjdExpc3QuZmlsdGVyKHByb2plY3QgPT4gcHJvamVjdC5pZCAhPT0gaWQpO1xuICAgICAgICBjb25zb2xlLmxvZygnYWZ0ZXInLCBwcm9qZWN0TGlzdCk7XG4gICAgICAgIHJldHVybiBwcm9qZWN0TGlzdFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdyYWJDdXJyZW50UHJvamVjdCgpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9qZWN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdyYWJQcm9qZWN0TGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIHByb2plY3RMaXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVByb2plY3QoKSB7XG4gICAgICAgIHByb2plY3RUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9qZWN0VGl0bGUnKS52YWx1ZTtcbiAgICAgICAgY29uc3QgcHJvamVjdElkID0gY3JlYXRlUHJvamVjdElkKClcbiAgICAgICAgY29uc3QgcHJvamVjdFRhc2tzID0gW107XG5cbiAgICAgICAgaWYgKHByb2plY3RUaXRsZSA9PT0gJycpIHJldHVyblxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3QgPSBuZXdQcm9qZWN0KHByb2plY3RUaXRsZSwgcHJvamVjdFRhc2tzLCBwcm9qZWN0SWQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2cocHJvamVjdCk7XG4gICAgICAgICAgICBhZGRUb1Byb2plY3RMaXN0KHByb2plY3QpO1xuICAgICAgICAgICAgc3RvcmVMb2NhbC5zdG9yZVByb2plY3RzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVQcm9qZWN0SWQoKSB7XG4gICAgICAgIGxldCBpZDtcbiAgICAgICAgaWYgKHByb2plY3RMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpZCA9IHByb2plY3RMaXN0W3Byb2plY3RMaXN0Lmxlbmd0aCAtIDFdLmlkICsgMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFRvUHJvamVjdExpc3QocHJvamVjdCkge1xuICAgICAgICBwcm9qZWN0TGlzdC5wdXNoKHByb2plY3QpO1xuICAgICAgICBjb25zb2xlLmxvZyhwcm9qZWN0TGlzdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICAgIGxldCBwcm9qZWN0VGl0bGVWYWx1ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9qZWN0VGl0bGUnKTtcbiAgICAgICAgcHJvamVjdFRpdGxlVmFsdWUudmFsdWUgPSAnJztcbiAgICAgICAgcHJvamVjdFRpdGxlID0gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3VibWl0UHJvamVjdCgpIHtcbiAgICAgICAgY29uc3QgY3JlYXRlUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjcmVhdGVQcm9qZWN0Jyk7XG5cbiAgICAgICAgY3JlYXRlUHJvamVjdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNyZWF0ZVByb2plY3QoKTtcbiAgICAgICAgICAgIGlmIChwcm9qZWN0VGl0bGUgPT09ICcnKSByZXR1cm5cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBwcm9qZWN0ID0gcHJvamVjdExpc3RbcHJvamVjdExpc3QubGVuZ3RoIC0xXTtcblxuICAgICAgICAgICAgICAgIHJlbmRlclByb2plY3QuZGlzcGxheVByb2plY3QocHJvamVjdCk7XG4gICAgICAgICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBncmFiUHJvamVjdElkKGUpIHtcbiAgICAgICAgbGV0IHByb2plY3RJZCA9IHBhcnNlSW50KGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0SWQnKSk7XG5cbiAgICAgICAgY3VycmVudFByb2plY3QgPSBwcm9qZWN0SWQ7XG5cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9qZWN0O1xuICAgIH1cblxuICAgIHJldHVybiB7IHN1Ym1pdFByb2plY3QsXG4gICAgICAgICAgICAgZ3JhYlByb2plY3RJZCxcbiAgICAgICAgICAgICBncmFiQ3VycmVudFByb2plY3QsIFxuICAgICAgICAgICAgIGdyYWJQcm9qZWN0TGlzdCwgXG4gICAgICAgICAgICAgcHJvamVjdExpc3QsIFxuICAgICAgICAgICAgIHVwZGF0ZUdlbmVyYWxMaXN0LFxuICAgICAgICAgICAgIHVwZGF0ZVByb2plY3QsIFxuICAgICAgICAgICAgIGdyYWJDdXJyZW50UHJvamVjdFRhc2tzLCBcbiAgICAgICAgICAgICByZW1vdmVQcm9qZWN0LFxuICAgICAgICAgICAgIGFkZFRvUHJvamVjdExpc3QgfVxufSkoKVxuXG5leHBvcnQgeyBwcm9qZWN0cyB9XG5cbiIsIi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBhcmd1bWVudCAtIFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgY29uc3QgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTtcblxuICAvLyBDbG9uZSB0aGUgZGF0ZVxuICBpZiAoXG4gICAgYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgKHR5cGVvZiBhcmd1bWVudCA9PT0gXCJvYmplY3RcIiAmJiBhcmdTdHIgPT09IFwiW29iamVjdCBEYXRlXVwiKVxuICApIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IGFyZ3VtZW50LmNvbnN0cnVjdG9yKCthcmd1bWVudCk7XG4gIH0gZWxzZSBpZiAoXG4gICAgdHlwZW9mIGFyZ3VtZW50ID09PSBcIm51bWJlclwiIHx8XG4gICAgYXJnU3RyID09PSBcIltvYmplY3QgTnVtYmVyXVwiIHx8XG4gICAgdHlwZW9mIGFyZ3VtZW50ID09PSBcInN0cmluZ1wiIHx8XG4gICAgYXJnU3RyID09PSBcIltvYmplY3QgU3RyaW5nXVwiXG4gICkge1xuICAgIC8vIFRPRE86IENhbiB3ZSBnZXQgcmlkIG9mIGFzP1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVE9ETzogQ2FuIHdlIGdldCByaWQgb2YgYXM/XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCB0b0RhdGU7XG4iLCJpbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZkRheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIHN0YXJ0IG9mIGEgZGF5XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIGRheSBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE9mRGF5KGRhdGUpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIF9kYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gX2RhdGU7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgc3RhcnRPZkRheTtcbiIsImltcG9ydCB7IGlzU2FtZURheSB9IGZyb20gXCIuL2lzU2FtZURheS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBpc1RvZGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHRvZGF5P1xuICogQHB1cmUgZmFsc2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBnaXZlbiBkYXRlIHRvZGF5P1xuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGRhdGUgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyBUaGUgZGF0ZSBpcyB0b2RheVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyA2IE9jdG9iZXIgMjAxNCwgaXMgNiBPY3RvYmVyIDE0OjAwOjAwIHRvZGF5P1xuICogY29uc3QgcmVzdWx0ID0gaXNUb2RheShuZXcgRGF0ZSgyMDE0LCA5LCA2LCAxNCwgMCkpXG4gKiAvLz0+IHRydWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVG9kYXkoZGF0ZSkge1xuICByZXR1cm4gaXNTYW1lRGF5KGRhdGUsIERhdGUubm93KCkpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGlzVG9kYXk7XG4iLCJpbXBvcnQgeyBzdGFydE9mRGF5IH0gZnJvbSBcIi4vc3RhcnRPZkRheS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBpc1NhbWVEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aCk/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIGRheSAoYW5kIHllYXIgYW5kIG1vbnRoKT9cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZUxlZnQgLSBUaGUgZmlyc3QgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIGRhdGVSaWdodCAtIFRoZSBzZWNvbmQgZGF0ZSB0byBjaGVja1xuXG4gKiBAcmV0dXJucyBUaGUgZGF0ZXMgYXJlIGluIHRoZSBzYW1lIGRheSAoYW5kIHllYXIgYW5kIG1vbnRoKVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIgMDY6MDA6MDAgYW5kIDQgU2VwdGVtYmVyIDE4OjAwOjAwIGluIHRoZSBzYW1lIGRheT9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0LCA2LCAwKSwgbmV3IERhdGUoMjAxNCwgOCwgNCwgMTgsIDApKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSA0IFNlcHRlbWJlciBhbmQgNCBPY3RvYmVyIGluIHRoZSBzYW1lIGRheT9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0KSwgbmV3IERhdGUoMjAxNCwgOSwgNCkpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSA0IFNlcHRlbWJlciwgMjAxNCBhbmQgNCBTZXB0ZW1iZXIsIDIwMTUgaW4gdGhlIHNhbWUgZGF5P1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDQpLCBuZXcgRGF0ZSgyMDE1LCA4LCA0KSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2FtZURheShkYXRlTGVmdCwgZGF0ZVJpZ2h0KSB7XG4gIGNvbnN0IGRhdGVMZWZ0U3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXkoZGF0ZUxlZnQpO1xuICBjb25zdCBkYXRlUmlnaHRTdGFydE9mRGF5ID0gc3RhcnRPZkRheShkYXRlUmlnaHQpO1xuXG4gIHJldHVybiArZGF0ZUxlZnRTdGFydE9mRGF5ID09PSArZGF0ZVJpZ2h0U3RhcnRPZkRheTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBpc1NhbWVEYXk7XG4iLCJsZXQgZGVmYXVsdE9wdGlvbnMgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhuZXdPcHRpb25zKSB7XG4gIGRlZmF1bHRPcHRpb25zID0gbmV3T3B0aW9ucztcbn1cbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4vX2xpYi9kZWZhdWx0T3B0aW9ucy5tanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIHN0YXJ0T2ZXZWVrfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZldlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIHN0YXJ0IG9mIGEgd2Vla1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZldlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gU3VuIEF1ZyAzMSAyMDE0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRoZSB3ZWVrIHN0YXJ0cyBvbiBNb25kYXksIHRoZSBzdGFydCBvZiB0aGUgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCksIHsgd2Vla1N0YXJ0c09uOiAxIH0pXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZldlZWsoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IHdlZWtTdGFydHNPbiA9XG4gICAgb3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIDA7XG5cbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IGRheSA9IF9kYXRlLmdldERheSgpO1xuICBjb25zdCBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcblxuICBfZGF0ZS5zZXREYXRlKF9kYXRlLmdldERhdGUoKSAtIGRpZmYpO1xuICBfZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIF9kYXRlO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZXZWVrO1xuIiwiaW1wb3J0IHsgaXNTYW1lV2VlayB9IGZyb20gXCIuL2lzU2FtZVdlZWsubWpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBpc1RoaXNXZWVrfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgaXNUaGlzV2Vla1xuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgaW4gdGhlIHNhbWUgd2VlayBhcyB0aGUgY3VycmVudCBkYXRlP1xuICogQHB1cmUgZmFsc2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBzYW1lIHdlZWsgYXMgdGhlIGN1cnJlbnQgZGF0ZT9cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIGRhdGUgaXMgaW4gdGhpcyB3ZWVrXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDI1IFNlcHRlbWJlciAyMDE0LCBpcyAyMSBTZXB0ZW1iZXIgMjAxNCBpbiB0aGlzIHdlZWs/XG4gKiBjb25zdCByZXN1bHQgPSBpc1RoaXNXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyAyNSBTZXB0ZW1iZXIgMjAxNCBhbmQgd2VlayBzdGFydHMgd2l0aCBNb25kYXlcbiAqIC8vIGlzIDIxIFNlcHRlbWJlciAyMDE0IGluIHRoaXMgd2Vlaz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzVGhpc1dlZWsobmV3IERhdGUoMjAxNCwgOCwgMjEpLCB7IHdlZWtTdGFydHNPbjogMSB9KVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUaGlzV2VlayhkYXRlLCBvcHRpb25zKSB7XG4gIHJldHVybiBpc1NhbWVXZWVrKGRhdGUsIERhdGUubm93KCksIG9wdGlvbnMpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGlzVGhpc1dlZWs7XG4iLCJpbXBvcnQgeyBzdGFydE9mV2VlayB9IGZyb20gXCIuL3N0YXJ0T2ZXZWVrLm1qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgaXNTYW1lV2Vla30gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIGlzU2FtZVdlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgd2VlayAoYW5kIG1vbnRoIGFuZCB5ZWFyKT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgd2VlayAoYW5kIG1vbnRoIGFuZCB5ZWFyKT9cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZUxlZnQgLSBUaGUgZmlyc3QgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIGRhdGVSaWdodCAtIFRoZSBzZWNvbmQgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIGRhdGVzIGFyZSBpbiB0aGUgc2FtZSB3ZWVrIChhbmQgbW9udGggYW5kIHllYXIpXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSAzMSBBdWd1c3QgMjAxNCBhbmQgNCBTZXB0ZW1iZXIgMjAxNCBpbiB0aGUgc2FtZSB3ZWVrP1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lV2VlayhuZXcgRGF0ZSgyMDE0LCA3LCAzMSksIG5ldyBEYXRlKDIwMTQsIDgsIDQpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHdlZWsgc3RhcnRzIHdpdGggTW9uZGF5LFxuICogLy8gYXJlIDMxIEF1Z3VzdCAyMDE0IGFuZCA0IFNlcHRlbWJlciAyMDE0IGluIHRoZSBzYW1lIHdlZWs/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVXZWVrKG5ldyBEYXRlKDIwMTQsIDcsIDMxKSwgbmV3IERhdGUoMjAxNCwgOCwgNCksIHtcbiAqICAgd2Vla1N0YXJ0c09uOiAxXG4gKiB9KVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgMSBKYW51YXJ5IDIwMTQgYW5kIDEgSmFudWFyeSAyMDE1IGluIHRoZSBzYW1lIHdlZWs/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVXZWVrKG5ldyBEYXRlKDIwMTQsIDAsIDEpLCBuZXcgRGF0ZSgyMDE1LCAwLCAxKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2FtZVdlZWsoZGF0ZUxlZnQsIGRhdGVSaWdodCwgb3B0aW9ucykge1xuICBjb25zdCBkYXRlTGVmdFN0YXJ0T2ZXZWVrID0gc3RhcnRPZldlZWsoZGF0ZUxlZnQsIG9wdGlvbnMpO1xuICBjb25zdCBkYXRlUmlnaHRTdGFydE9mV2VlayA9IHN0YXJ0T2ZXZWVrKGRhdGVSaWdodCwgb3B0aW9ucyk7XG5cbiAgcmV0dXJuICtkYXRlTGVmdFN0YXJ0T2ZXZWVrID09PSArZGF0ZVJpZ2h0U3RhcnRPZldlZWs7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgaXNTYW1lV2VlaztcbiIsImltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIi4vbWFuYWdlUHJvamVjdFwiO1xuaW1wb3J0IHsgaXNUb2RheSwgdG9EYXRlLCBpc1RoaXNXZWVrIH0gZnJvbSBcImRhdGUtZm5zXCI7XG5pbXBvcnQgeyBBZGR0b0xpc3QgfSBmcm9tIFwiLi9tYW5hZ2VMaXN0XCI7XG5pbXBvcnQgeyBzdG9yZUxvY2FsIH0gZnJvbSBcIi4vc3RvcmFnZVwiO1xuXG5jb25zdCByZW5kZXJUYXNrID0gKCgpID0+IHtcbiAgICBmdW5jdGlvbiBkaXNwbGF5QWxsVGFzayhpdGVtcywgZGlzcGxheSkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLXRhc2tJZCcsIGAke2l0ZW1zLmlkfWApXG5cbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Rhc2snKTtcblxuICAgICAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIGNvbnN0IGR1ZWRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29uc3QgZGV0YWlscyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb25zdCBwcmlvcml0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb25zdCBkZWxldGVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgY29uc3QgZWRpdEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcblxuICAgICAgICB0aXRsZS50ZXh0Q29udGVudCA9IGBUaXRsZTogJHtpdGVtcy50aXRsZX1gO1xuICAgICAgICBkdWVkYXRlLnRleHRDb250ZW50ID0gYER1ZSBEYXRlOiAke2l0ZW1zLmR1ZWRhdGV9YDtcbiAgICAgICAgZGV0YWlscy50ZXh0Q29udGVudCA9IGBEZXRhaWxzOiAke2l0ZW1zLmRldGFpbHN9YDtcbiAgICAgICAgcHJpb3JpdHkudGV4dENvbnRlbnQgPSBgUHJpb3JpdHk6ICR7aXRlbXMucHJpb3JpdHl9YDtcbiAgICAgICAgZGVsZXRlQnRuLnRleHRDb250ZW50ID0gJ2RlbGV0ZSc7XG4gICAgICAgIGVkaXRCdG4udGV4dENvbnRlbnQgPSAnZWRpdCc7XG4gICAgICAgIGxhYmVsLnRleHRDb250ZW50ID0gJ0RvbmU/JztcblxuICAgICAgICBjaGVja2JveC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnY2hlY2tib3gnKTtcbiAgICAgICAgY2hlY2tib3guc2V0QXR0cmlidXRlKCdpZCcsIGBzdGF0dXMtJHtpdGVtcy5pZH1gKTtcbiAgICAgICAgY2hlY2tib3guc2V0QXR0cmlidXRlKCduYW1lJywgJ3N0YXR1cycpO1xuICAgICAgICBjaGVja2JveC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJ29mZicpO1xuICAgICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGBzdGF0dXMtJHtpdGVtcy5pZH1gKTtcbiAgICAgICAgZGVsZXRlQnRuLnNldEF0dHJpYnV0ZSgnZGF0YS10YXNrSWQnLCBgJHtpdGVtcy5pZH1gKTtcbiAgICAgICAgXG5cbiAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2hlY2tib3gudmFsdWUgPT09ICdvZmYnKSB7aW5pdENoZWNrYm94T24oaXRlbXMsIGNoZWNrYm94LCBsYWJlbCwgZWRpdEJ0biwgY29udGFpbmVyKX1cbiAgICAgICAgICAgIGVsc2Uge2luaXRDaGVja2JveE9mZihpdGVtcywgY2hlY2tib3gsIGxhYmVsLCBlZGl0QnRuLCBjb250YWluZXIpfTtcbiAgICAgICAgXG4gICAgICAgICAgICBzdG9yZUxvY2FsLnN0b3JlUHJvamVjdHMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVsZXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gaW5pdERlbEJ0bihpdGVtcy5pZCwgaXRlbXMucHJvamVjdCkpO1xuICAgICAgICBlZGl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge2luaXRFZGl0QnRuKGl0ZW1zKX0pO1xuXG4gICAgICAgIGlmIChpdGVtcy5zdGF0dXMgPT09ICdmaW5pc2hlZCcpIHtcbiAgICAgICAgICAgIGNoZWNrYm94LnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsJycpO1xuICAgICAgICAgICAgaW5pdENoZWNrYm94T24oaXRlbXMsIGNoZWNrYm94LCBsYWJlbCwgZWRpdEJ0biwgY29udGFpbmVyKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb250YWluZXIuYXBwZW5kKHRpdGxlLCBkdWVkYXRlLCBkZXRhaWxzLCBwcmlvcml0eSwgZGVsZXRlQnRuLCBlZGl0QnRuLCBsYWJlbCwgY2hlY2tib3gpO1xuICAgICAgICBkaXNwbGF5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICAgICAgcmV0dXJuIGRpc3BsYXk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdENoZWNrYm94T24oaXRlbXMsIGNoZWNrYm94LCBsYWJlbCwgZWRpdEJ0biwgY29udGFpbmVyKSB7XG4gICAgICAgICAgICBsYWJlbC50ZXh0Q29udGVudCA9ICdEb25lISc7XG4gICAgICAgICAgICBjaGVja2JveC52YWx1ZSA9ICdvbic7XG4gICAgICAgICAgICBlZGl0QnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gICAgICAgICAgICBpdGVtcy5zdGF0dXMgPSAnZmluaXNoZWQnO1xuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2ZpbmlzaGVkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdENoZWNrYm94T2ZmKGl0ZW1zLCBjaGVja2JveCwgbGFiZWwsIGVkaXRCdG4sIGNvbnRhaW5lcikge1xuICAgICAgICBsYWJlbC50ZXh0Q29udGVudCA9ICdEb25lPyc7XG4gICAgICAgIGNoZWNrYm94LnZhbHVlID0gJ29mZic7XG4gICAgICAgIGVkaXRCdG4ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgICAgICBpdGVtcy5zdGF0dXMgPSAndW5maW5pc2hlZCc7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdmaW5pc2hlZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRFZGl0QnRuKHRhc2spIHtcbiAgICAgICAgY29uc3QgdGFza0Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFpbi1mb3JtJyk7XG5cbiAgICAgICAgdGFza0Zvcm0uY2xhc3NMaXN0LmFkZCgnZWRpdC1tb2RlJyk7XG4gICAgICAgIHRhc2tGb3JtLnNldEF0dHJpYnV0ZSgnZGF0YS10YXNrSWQnLCBgJHt0YXNrLmlkfWApO1xuXG4gICAgICAgIGxldCB0aXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aXRsZScpO1xuICAgICAgICBsZXQgZGV0YWlscyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXRhaWxzJyk7XG4gICAgICAgIGxldCBkYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhdGUnKTtcbiAgICAgICAgbGV0IHByaW9yaXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW9yaXR5Jyk7XG5cbiAgICAgICAgY29uc3QgdGFza1RpdGxlID0gdGFzay50aXRsZTtcbiAgICAgICAgY29uc3QgdGFza0RldGFpbHMgPSB0YXNrLmRldGFpbHM7XG4gICAgICAgIGNvbnN0IHRhc2tEYXRlID0gdGFzay5kdWVkYXRlO1xuICAgICAgICBjb25zdCB0YXNrUHJpb3JpdHkgPSB0YXNrLnByaW9yaXR5O1xuXG4gICAgICAgIHRpdGxlLnZhbHVlID0gdGFza1RpdGxlO1xuICAgICAgICBkZXRhaWxzLnZhbHVlID0gdGFza0RldGFpbHM7XG4gICAgICAgIGRhdGUudmFsdWUgPSB0YXNrRGF0ZTtcbiAgICAgICAgcHJpb3JpdHkudmFsdWUgPSB0YXNrUHJpb3JpdHk7XG5cbiAgICAgICAgdGFza0Zvcm0ucmVtb3ZlQXR0cmlidXRlKCdoaWRkZW4nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0RGVsQnRuKGlkLCBwcm9qZWN0SWQpIHtcbiAgICAgICAgbGV0IEFsbHRhc2sgPSBBZGR0b0xpc3QucmVtb3ZlVGFzayhpZCk7XG4gICAgICAgIGNvbnN0IGdlbmVyYWxMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2dlbmVyYWwnKTtcblxuICAgICAgICBwcm9qZWN0cy51cGRhdGVHZW5lcmFsTGlzdChBbGx0YXNrKTtcbiAgICAgICAgcHJvamVjdHMudXBkYXRlUHJvamVjdChwcm9qZWN0SWQpO1xuICAgICAgICBzdG9yZUxvY2FsLnN0b3JlUHJvamVjdHMoKTtcblxuICAgICAgICB3aGlsZSAoZ2VuZXJhbExpc3QubGFzdEVsZW1lbnRDaGlsZCkgZ2VuZXJhbExpc3QucmVtb3ZlQ2hpbGQoZ2VuZXJhbExpc3QubGFzdEVsZW1lbnRDaGlsZCk7XG4gICAgICAgIFxuICAgICAgICB1cGRhdGVEaXNwbGF5KHByb2plY3RJZCk7XG5cbiAgICAgICAgY29uc29sZS5sb2cocHJvamVjdHMucHJvamVjdExpc3QpO1xuICAgICAgICBjb25zb2xlLmxvZyhwcm9qZWN0SWQpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ3JhYlRhYigpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRUYWIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ2VuZXJhbCcpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUYWI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlRGlzcGxheShpZCkge1xuICAgICAgICBsZXQgdGFiID0gZ3JhYlRhYigpO1xuICAgICAgICBpZiAodGFiID09PSAnaW5ib3hUYWInKSBkaXNwbGF5SW5ib3goKVxuICAgICAgICBlbHNlIGlmICh0YWIgPT09ICd0b2RheVRhYicpIGRpc3BsYXlEYWlseSgpXG4gICAgICAgIGVsc2UgaWYgKHRhYiA9PT0gJ3dlZWtUYWInKSBkaXNwbGF5V2Vla2x5KClcbiAgICAgICAgZWxzZSBpZiAodGFiID09PSBgJHtpZH1gICYmIGlkICE9PSAwKSByZW5kZXJQcm9qZWN0LmRpc3BsYXlQcm9qZWN0VGFza3MoaWQpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzcGxheUluYm94KCkge1xuICAgICAgICBsZXQgbGlzdCA9IHByb2plY3RzLmdyYWJQcm9qZWN0TGlzdCgpWzBdLnRhc2tMaXN0O1xuICAgICAgICBjb25zdCBnZW5lcmFsTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnZW5lcmFsJyk7XG4gICAgICAgIGdlbmVyYWxMaXN0LmNsYXNzTGlzdC5yZXBsYWNlKGdlbmVyYWxMaXN0LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSwgJ2luYm94VGFiJyk7XG5cbiAgICAgICAgd2hpbGUgKGdlbmVyYWxMaXN0Lmxhc3RFbGVtZW50Q2hpbGQpIGdlbmVyYWxMaXN0LnJlbW92ZUNoaWxkKGdlbmVyYWxMaXN0Lmxhc3RFbGVtZW50Q2hpbGQpO1xuICAgICAgICBjb25zb2xlLmxvZyhsaXN0KVxuICAgICAgICBsaXN0LmZvckVhY2godGFzayA9PiBkaXNwbGF5QWxsVGFzayh0YXNrLCBnZW5lcmFsTGlzdCkpO1xuICAgICAgICBjb25zb2xlLmxvZyhwcm9qZWN0cy5wcm9qZWN0TGlzdClcbiAgICAgICAgXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzcGxheURhaWx5KCkge1xuICAgICAgICBsZXQgbGlzdCA9IHByb2plY3RzLmdyYWJQcm9qZWN0TGlzdCgpWzBdLnRhc2tMaXN0O1xuICAgICAgICBjb25zdCBnZW5lcmFsTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnZW5lcmFsJyk7XG4gICAgICAgIGdlbmVyYWxMaXN0LmNsYXNzTGlzdC5yZXBsYWNlKGdlbmVyYWxMaXN0LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSwgJ3RvZGF5VGFiJyk7XG5cbiAgICAgICAgd2hpbGUgKGdlbmVyYWxMaXN0Lmxhc3RFbGVtZW50Q2hpbGQpIGdlbmVyYWxMaXN0LnJlbW92ZUNoaWxkKGdlbmVyYWxMaXN0Lmxhc3RFbGVtZW50Q2hpbGQpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZGFpbHlUYXNrcyA9IGxpc3QuZmlsdGVyKHRhc2sgPT4gaXNUb2RheSh0b0RhdGUodGFzay5kdWVkYXRlKSkpO1xuICAgICAgICBcbiAgICAgICAgZGFpbHlUYXNrcy5mb3JFYWNoKHRhc2sgPT4gZGlzcGxheUFsbFRhc2sodGFzaywgZ2VuZXJhbExpc3QpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNwbGF5V2Vla2x5KCkge1xuICAgICAgICBsZXQgbGlzdCA9IHByb2plY3RzLmdyYWJQcm9qZWN0TGlzdCgpWzBdLnRhc2tMaXN0O1xuICAgICAgICBjb25zdCBnZW5lcmFsTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnZW5lcmFsJyk7XG4gICAgICAgIGdlbmVyYWxMaXN0LmNsYXNzTGlzdC5yZXBsYWNlKGdlbmVyYWxMaXN0LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSwgJ3dlZWtUYWInKTtcblxuICAgICAgICB3aGlsZSAoZ2VuZXJhbExpc3QubGFzdEVsZW1lbnRDaGlsZCkgZ2VuZXJhbExpc3QucmVtb3ZlQ2hpbGQoZ2VuZXJhbExpc3QubGFzdEVsZW1lbnRDaGlsZCk7XG5cbiAgICAgICAgY29uc3Qgd2Vla2x5VGFza3MgPSBsaXN0LmZpbHRlcih0YXNrID0+IGlzVGhpc1dlZWsodG9EYXRlKHRhc2suZHVlZGF0ZSkpKTtcblxuICAgICAgICB3ZWVrbHlUYXNrcy5mb3JFYWNoKHRhc2sgPT4gZGlzcGxheUFsbFRhc2sodGFzaywgZ2VuZXJhbExpc3QpKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBkaXNwbGF5SW5ib3gsIGRpc3BsYXlEYWlseSwgZGlzcGxheVdlZWtseSwgZGlzcGxheUFsbFRhc2ssIHVwZGF0ZURpc3BsYXksIGdyYWJUYWIgfVxufSkoKVxuXG5jb25zdCByZW5kZXJQcm9qZWN0ID0gKCgpID0+IHtcbiAgICBmdW5jdGlvbiBkaXNwbGF5UHJvamVjdChwcm9qZWN0KSB7XG4gICAgICAgIGNvbnN0IHByb2plY3REaXNwbGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFsbC1wcm9qZWN0cycpO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBjb25zdCBwcm9qZWN0VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29uc3QgcHJvamVjdFRhc2tCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgY29uc3QgcHJvamVjdERlbEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuXG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKGBwcm9qZWN0LSR7cHJvamVjdC5pZH1gKTtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2NvbnRhaW5lci1wcm9qZWN0Jyk7XG4gICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdElkJywgYCR7cHJvamVjdC5pZH1gKTtcbiAgICAgICAgcHJvamVjdFRhc2tCdG4uc2V0QXR0cmlidXRlKCdkYXRhLXByb2plY3RJZCcsIGAke3Byb2plY3QuaWR9YCk7XG4gICAgICAgIHByb2plY3RUYXNrQnRuLnNldEF0dHJpYnV0ZSgnaWQnLCBgcHJvamVjdC0ke3Byb2plY3QuaWR9YCk7XG4gICAgICAgIHByb2plY3REZWxCdG4uY2xhc3NMaXN0LmFkZCgnZGVsLXByb2plY3QnKTtcblxuICAgICAgICBwcm9qZWN0VGl0bGUudGV4dENvbnRlbnQgPSBgJHtwcm9qZWN0LnRpdGxlfWA7XG4gICAgICAgIHByb2plY3RUYXNrQnRuLnRleHRDb250ZW50ID0gJysnO1xuICAgICAgICBwcm9qZWN0RGVsQnRuLnRleHRDb250ZW50ID0gJ2RlbGV0ZSc7XG5cbiAgICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBkaXNwbGF5UHJvamVjdFRhc2tzKHByb2plY3QuaWQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBwcm9qZWN0VGFza0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3Byb2plY3QgaWQnLCBwcm9qZWN0cy5ncmFiUHJvamVjdElkKGUpKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Rhc2tGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21haW4tZm9ybScpO1xuXG4gICAgICAgICAgICBwcm9qZWN0cy5ncmFiUHJvamVjdElkKGUpO1xuICAgICAgICAgICAgbmV3VGFza0Zvcm0ucmVtb3ZlQXR0cmlidXRlKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSlcblxuICAgICAgICBwcm9qZWN0RGVsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBpbml0RGVsUHJvakJ0bihwcm9qZWN0LmlkKTtcbiAgICAgICAgfSlcblxuICAgICAgICBjb250YWluZXIuYXBwZW5kKHByb2plY3RUaXRsZSwgcHJvamVjdFRhc2tCdG4sIHByb2plY3REZWxCdG4pO1xuICAgICAgICBwcm9qZWN0RGlzcGxheS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAgIHJldHVybiBwcm9qZWN0RGlzcGxheVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXREZWxQcm9qQnRuKHByb2plY3RJZCkge1xuICAgICAgICBwcm9qZWN0cy5yZW1vdmVQcm9qZWN0KHByb2plY3RJZCk7XG5cbiAgICAgICAgbGV0IHVwZGF0ZWRQcm9qZWN0cyA9IHByb2plY3RzLmdyYWJQcm9qZWN0TGlzdCgpO1xuICAgICAgICBsZXQgdGFza0xpc3QgPSBBZGR0b0xpc3QuVG9kb0xpc3Q7XG4gICAgICAgIGxldCB1cGRhdGVkVGFza0xpc3QgPSB0YXNrTGlzdC5maWx0ZXIodGFzayA9PiB0YXNrLnByb2plY3QgPT09IHByb2plY3RJZCk7XG5cbiAgICAgICAgdXBkYXRlZFRhc2tMaXN0LmZvckVhY2godGFzayA9PiB7XG4gICAgICAgICAgICBsZXQgbmV3TGlzdCA9IEFkZHRvTGlzdC5yZW1vdmVUYXNrKHRhc2suaWQpO1xuICAgICAgICAgICAgcHJvamVjdHMudXBkYXRlR2VuZXJhbExpc3QobmV3TGlzdCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBwcm9qZWN0c0Rpc3BsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWxsLXByb2plY3RzJyk7XG4gICAgICAgIHdoaWxlIChwcm9qZWN0c0Rpc3BsYXkubGFzdEVsZW1lbnRDaGlsZCkgcHJvamVjdHNEaXNwbGF5LnJlbW92ZUNoaWxkKHByb2plY3RzRGlzcGxheS5sYXN0RWxlbWVudENoaWxkKTtcblxuICAgICAgICB1cGRhdGVkUHJvamVjdHMuZm9yRWFjaChwcm9qZWN0ID0+IHtcbiAgICAgICAgICAgIGlmIChwcm9qZWN0LmlkID4gMCkgZGlzcGxheVByb2plY3QocHJvamVjdCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwYXJzZUludChyZW5kZXJUYXNrLmdyYWJUYWIocHJvamVjdElkKSkgPT09IHByb2plY3RJZCkgcmVuZGVyVGFzay5kaXNwbGF5SW5ib3goKVxuICAgICAgICBlbHNlIHJlbmRlclRhc2sudXBkYXRlRGlzcGxheShwcm9qZWN0SWQpO1xuXG4gICAgICAgIHN0b3JlTG9jYWwuc3RvcmVQcm9qZWN0cygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc3BsYXlQcm9qZWN0VGFza3MoaWQpIHtcbiAgICAgICAgbGV0IGxpc3QgPSBwcm9qZWN0cy5wcm9qZWN0TGlzdDtcbiAgICAgICAgY29uc3QgZ2VuZXJhbExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ2VuZXJhbCcpO1xuICAgICAgICBnZW5lcmFsTGlzdC5jbGFzc0xpc3QucmVwbGFjZShnZW5lcmFsTGlzdC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyksIGAke2lkfWApO1xuXG4gICAgICAgIHdoaWxlIChnZW5lcmFsTGlzdC5sYXN0RWxlbWVudENoaWxkKSBnZW5lcmFsTGlzdC5yZW1vdmVDaGlsZChnZW5lcmFsTGlzdC5sYXN0RWxlbWVudENoaWxkKTtcblxuICAgICAgICBsZXQgcHJvamVjdFRhc2tzID0gcHJvamVjdHMuZ3JhYkN1cnJlbnRQcm9qZWN0VGFza3MoaWQpO1xuXG4gICAgICAgIHByb2plY3RUYXNrcy5mb3JFYWNoKHRhc2sgPT4gcmVuZGVyVGFzay5kaXNwbGF5QWxsVGFzayh0YXNrLCBnZW5lcmFsTGlzdCkpO1xuICAgIH1cblxuICAgIHJldHVybiB7IGRpc3BsYXlQcm9qZWN0LCBkaXNwbGF5UHJvamVjdFRhc2tzIH1cbn0pKClcblxuZXhwb3J0IHsgcmVuZGVyVGFzaywgcmVuZGVyUHJvamVjdCB9IiwiaW1wb3J0IHsgQWRkdG9MaXN0IH0gZnJvbSBcIi4vbWFuYWdlTGlzdFwiO1xuaW1wb3J0IHsgcmVuZGVyVGFzayB9IGZyb20gXCIuL1VJXCI7XG5pbXBvcnQgeyBwcm9qZWN0cyB9IGZyb20gXCIuL21hbmFnZVByb2plY3RcIjtcbmltcG9ydCB7IHRvRGF0ZSwgaXNUaGlzV2VlaywgaXNUb2RheSB9IGZyb20gXCJkYXRlLWZuc1wiO1xuaW1wb3J0IHsgc3RvcmVMb2NhbCB9IGZyb20gXCIuL3N0b3JhZ2VcIjtcblxuXG5jb25zdCBjcmVhdGVUYXNrID0gKGlkLCB0aXRsZSwgZGV0YWlscywgZHVlZGF0ZSwgcHJpb3JpdHksIHByb2plY3QsIHN0YXR1cykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkLCB0aXRsZSwgZGV0YWlscywgZHVlZGF0ZSwgcHJpb3JpdHksIHByb2plY3QsIHN0YXR1c1xuICAgIH1cbn1cblxuY29uc3QgTmV3VGFzayA9ICgoKSA9PiB7XG5cbiAgICBsZXQgdGl0bGU7XG4gICAgbGV0IGRldGFpbHM7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVOZXdUYXNrKCkge1xuICAgICAgICBjb25zdCBwcm9qZWN0TGlzdCA9IHByb2plY3RzLmdyYWJQcm9qZWN0TGlzdCgpO1xuXG4gICAgICAgIHRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlJykudmFsdWU7XG4gICAgICAgIGRldGFpbHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGV0YWlscycpLnZhbHVlO1xuXG4gICAgICAgIGxldCBkdWVkYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhdGUnKS52YWx1ZTtcbiAgICAgICAgbGV0IHByaW9yaXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW9yaXR5JykudmFsdWU7XG4gICAgICAgIGxldCBpZCA9IGNyZWF0ZUlkKCk7XG4gICAgICAgIGxldCBwcm9qZWN0SWQgPSBwcm9qZWN0cy5ncmFiQ3VycmVudFByb2plY3QoKTtcbiAgICAgICAgbGV0IHN0YXR1cyA9ICd1bmZpbmlzaGVkJ1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGlzVGhpc1dlZWsodG9EYXRlKGR1ZWRhdGUpKSlcbiAgICAgICAgY29uc29sZS5sb2coaXNUb2RheSh0b0RhdGUoZHVlZGF0ZSkpKVxuXG4gICAgICAgIGlmICh0aXRsZSA9PT0gJycgfHwgZGV0YWlscyA9PT0gJycgfHwgZHVlZGF0ZSA9PT0gJycpIHJldHVyblxuXG4gICAgICAgIGNvbnN0IHRhc2sgPSBjcmVhdGVUYXNrKGlkLCB0aXRsZSwgZGV0YWlscywgZHVlZGF0ZSwgcHJpb3JpdHksIHByb2plY3RJZCwgc3RhdHVzKTtcbiAgICAgICAgY29uc29sZS5sb2codGFzayk7XG5cbiAgICAgICAgYWRkVG9UYXNrbGlzdChwcm9qZWN0SWQsIHRhc2spOyAgICAgICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUb1Rhc2tsaXN0KHByb2plY3RJZCwgdGFzaykge1xuICAgICAgICBjb25zdCBwcm9qZWN0TGlzdCA9IHByb2plY3RzLmdyYWJQcm9qZWN0TGlzdCgpO1xuXG4gICAgICAgIGlmIChwcm9qZWN0SWQgPT09IDApIHtcbiAgICAgICAgICAgIHByb2plY3RMaXN0WzBdLnRhc2tMaXN0LnB1c2godGFzayk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwcm9qZWN0TGlzdClcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcHJvamVjdExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChwcm9qZWN0TGlzdFtpXS5pZCA9PT0gcHJvamVjdElkKSB7XG4gICAgICAgICAgICAgICAgQWRkdG9MaXN0LmFkZFRvTGlzdCh0YXNrKTtcbiAgICAgICAgICAgICAgICBwcm9qZWN0TGlzdFtpXS50YXNrTGlzdC5wdXNoKHRhc2spO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHByb2plY3RMaXN0KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSWQoKSB7XG4gICAgICAgIGxldCBsaXN0ID0gcHJvamVjdHMuZ3JhYlByb2plY3RMaXN0KClbMF0udGFza0xpc3Q7XG4gICAgICAgIGxldCBpZDtcblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBpZCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaWQgPSBsaXN0W2xpc3QubGVuZ3RoLTFdLmlkICsgMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICBsZXQgdGl0bGVWYWx1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aXRsZScpO1xuICAgICAgICB0aXRsZVZhbHVlLnZhbHVlID0gJyc7XG4gICAgICAgIHRpdGxlID0gJyc7XG5cbiAgICAgICAgbGV0IGRldGFpbHNWYWx1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXRhaWxzJyk7XG4gICAgICAgIGRldGFpbHNWYWx1ZS52YWx1ZSA9ICcnO1xuICAgICAgICBkZXRhaWxzID0gJyc7XG5cbiAgICAgICAgbGV0IGR1ZWRhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGF0ZScpO1xuICAgICAgICBkdWVkYXRlLnZhbHVlID0gJyc7XG5cbiAgICAgICAgbGV0IHByaW9yaXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW9yaXR5Jyk7XG4gICAgICAgIHByaW9yaXR5LnZhbHVlID0gJ0xvdyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdFN1Ym1pdEJ0bigpIHtcbiAgICAgICAgY29uc3Qgc3VibWl0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N1Ym1pdCcpO1xuXG4gICAgICAgIHN1Ym1pdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBzdWJtaXRUYXNrKCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlZGl0VGFzayhpZCkge1xuICAgICAgICBsZXQgdGFza1RpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlJykudmFsdWU7XG4gICAgICAgIGxldCB0YXNrRGV0YWlscyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXRhaWxzJykudmFsdWU7XG4gICAgICAgIGxldCB0YXNrRGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkYXRlJykudmFsdWU7XG4gICAgICAgIGxldCB0YXNrUHJpb3JpdHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJpb3JpdHknKS52YWx1ZTtcblxuICAgICAgICBjb25zdCB0YXNrTGlzdCA9IHByb2plY3RzLmdyYWJQcm9qZWN0TGlzdCgpWzBdLnRhc2tMaXN0O1xuICAgICAgICBjb25zdCBlZGl0ZWRUYXNrID0gdGFza0xpc3QuZmlsdGVyKHRhc2sgPT4gaWQgPT09IHRhc2suaWQpWzBdO1xuXG4gICAgICAgIGVkaXRlZFRhc2sudGl0bGUgPSB0YXNrVGl0bGU7XG4gICAgICAgIGVkaXRlZFRhc2suZGV0YWlscyA9IHRhc2tEZXRhaWxzO1xuICAgICAgICBlZGl0ZWRUYXNrLmR1ZWRhdGUgPSB0YXNrRGF0ZTtcbiAgICAgICAgZWRpdGVkVGFzay5wcmlvcml0eSA9IHRhc2tQcmlvcml0eTtcblxuICAgICAgICB0aXRsZSA9IHRhc2tUaXRsZTtcbiAgICAgICAgZGV0YWlscyA9IHRhc2tEZXRhaWxzO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFza0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0YXNrTGlzdFtpXS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICB0YXNrTGlzdFtpXSA9IGVkaXRlZFRhc2s7XG4gICAgICAgICAgICAgICAgcHJvamVjdHMudXBkYXRlUHJvamVjdCh0YXNrTGlzdFtpXS5wcm9qZWN0KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwcm9qZWN0cy5ncmFiUHJvamVjdExpc3QoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdWJtaXRUYXNrKCkge1xuICAgICAgICBjb25zdCBuZXdUYXNrRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluLWZvcm0nKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXdUYXNrJyk7XG4gICAgICAgIGNvbnN0IHRhc2tJZCA9IHBhcnNlSW50KG5ld1Rhc2tGb3JtLmdldEF0dHJpYnV0ZSgnZGF0YS10YXNrSWQnKSk7XG4gICAgICAgIFxuICAgICAgICBpZiAobmV3VGFza0Zvcm0uZ2V0QXR0cmlidXRlKCdjbGFzcycpID09PSAnZWRpdC1tb2RlJykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3dlcmsnKVxuICAgICAgICAgICAgZWRpdFRhc2sodGFza0lkKTtcbiAgICAgICAgfSBlbHNlIHtjcmVhdGVOZXdUYXNrKCl9O1xuICAgICAgICBzdG9yZUxvY2FsLnN0b3JlUHJvamVjdHMoKTtcblxuICAgICAgICBpZiAodGl0bGUgPT09ICcnIHx8IGRldGFpbHMgPT09ICcnKSByZXR1cm5cblxuICAgICAgICBsZXQgcHJvamVjdElkO1xuICAgICAgICBsZXQgdGFza0xpc3QgPSBwcm9qZWN0cy5ncmFiUHJvamVjdExpc3QoKVswXS50YXNrTGlzdFxuXG4gICAgICAgIGlmIChuZXdUYXNrRm9ybS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgPT09ICdlZGl0LW1vZGUnKSB7XG4gICAgICAgICAgICBwcm9qZWN0SWQgPSB0YXNrTGlzdC5maWx0ZXIodGFzayA9PiB0YXNrSWQgPT09IHRhc2suaWQpWzBdLnByb2plY3Q7XG4gICAgICAgICAgICBuZXdUYXNrRm9ybS5jbGFzc0xpc3QucmVtb3ZlKCdlZGl0LW1vZGUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2plY3RJZCA9IHRhc2tMaXN0W3Rhc2tMaXN0Lmxlbmd0aCAtIDFdLnByb2plY3Q7IFxuICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgcmVuZGVyVGFzay51cGRhdGVEaXNwbGF5KHByb2plY3RJZCk7XG4gICAgICAgIHJlc2V0KCk7XG4gICAgICAgIG5ld1Rhc2tGb3JtLnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuICAgICAgICBuZXdUYXNrQnRuLnJlbW92ZUF0dHJpYnV0ZSgnaGlkZGVuJyk7XG4gICAgICAgIFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbmNlbFRhc2soKSB7XG4gICAgICAgIGNvbnN0IGNhbmNlbEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjYW5jZWwnKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFpbi1mb3JtJyk7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2tCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbmV3VGFzaycpO1xuXG4gICAgICAgIGNhbmNlbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgICAgbmV3VGFza0Zvcm0uc2V0QXR0cmlidXRlKCdoaWRkZW4nLCAnJyk7XG4gICAgICAgICAgICBuZXdUYXNrQnRuLnJlbW92ZUF0dHJpYnV0ZSgnaGlkZGVuJyk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb3BlblRhc2tDcmVhdG9yKCkge1xuICAgICAgICBjb25zdCBuZXdUYXNrQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI25ld1Rhc2snKTtcbiAgICAgICAgY29uc3QgbmV3VGFza0Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFpbi1mb3JtJyk7XG5cbiAgICAgICAgbmV3VGFza0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBwcm9qZWN0cy5ncmFiUHJvamVjdElkKGUpO1xuICAgICAgICAgICAgbmV3VGFza0Zvcm0ucmVtb3ZlQXR0cmlidXRlKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIG5ld1Rhc2tCdG4uc2V0QXR0cmlidXRlKCdoaWRkZW4nLCAnJyk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHsgY3JlYXRlTmV3VGFzaywgaW5pdFN1Ym1pdEJ0biwgY2FuY2VsVGFzaywgb3BlblRhc2tDcmVhdG9yLCBhZGRUb1Rhc2tsaXN0IH1cbn0pKCk7XG5cbmV4cG9ydCB7IE5ld1Rhc2sgfVxuIiwiaW1wb3J0IHsgTmV3VGFzayB9IGZyb20gXCIuL21hbmFnZVRhc2suanNcIjtcbmltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIi4vbWFuYWdlUHJvamVjdC5qc1wiO1xuaW1wb3J0IHsgcmVuZGVyVGFzayB9IGZyb20gXCIuL1VJLmpzXCI7XG5pbXBvcnQgeyBzdG9yZUxvY2FsIH0gZnJvbSBcIi4vc3RvcmFnZS5qc1wiO1xuXG5OZXdUYXNrLmluaXRTdWJtaXRCdG4oKTtcbk5ld1Rhc2suY2FuY2VsVGFzaygpO1xuTmV3VGFzay5vcGVuVGFza0NyZWF0b3IoKTtcblxucHJvamVjdHMuc3VibWl0UHJvamVjdCgpO1xuXG5jb25zdCB0b2RheVRhYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0b2RheScpO1xuY29uc3Qgd2Vla1RhYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3ZWVrbHknKTtcbmNvbnN0IGluYm94VGFiID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2luYm94Jyk7XG5cbnRvZGF5VGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxyZW5kZXJUYXNrLmRpc3BsYXlEYWlseSk7XG53ZWVrVGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVuZGVyVGFzay5kaXNwbGF5V2Vla2x5KTtcbmluYm94VGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVuZGVyVGFzay5kaXNwbGF5SW5ib3gpO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgc3RvcmVMb2NhbC5sb2FkU3RvcmFnZSk7Il0sIm5hbWVzIjpbIkFkZHRvTGlzdCIsIlRvZG9MaXN0IiwiYWRkVG9MaXN0IiwidGFzayIsInB1c2giLCJjb25zb2xlIiwibG9nIiwicmVtb3ZlVGFzayIsImlkIiwiZmlsdGVyIiwic3RvcmVMb2NhbCIsInByb2plY3RMaXN0IiwicHJvamVjdHMiLCJncmFiUHJvamVjdExpc3QiLCJpdGVtIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJzZSIsImdldEl0ZW0iLCJuZXdMaXN0IiwicHJvamVjdCIsImZvckVhY2giLCJ0YXNrTGlzdCIsImFkZFRvUHJvamVjdExpc3QiLCJyZW5kZXJQcm9qZWN0IiwiZGlzcGxheVByb2plY3QiLCJOZXdUYXNrIiwiYWRkVG9UYXNrbGlzdCIsInJlbmRlclRhc2siLCJ1cGRhdGVEaXNwbGF5IiwibmV3UHJvamVjdCIsInRpdGxlIiwicHJvamVjdFRpdGxlIiwiZ2VuZXJhbExpc3QiLCJjdXJyZW50UHJvamVjdCIsInN1Ym1pdFByb2plY3QiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwidmFsdWUiLCJwcm9qZWN0SWQiLCJsZW5ndGgiLCJjcmVhdGVQcm9qZWN0IiwiZ3JhYlByb2plY3RJZCIsInBhcnNlSW50IiwidGFyZ2V0IiwiZ2V0QXR0cmlidXRlIiwiZ3JhYkN1cnJlbnRQcm9qZWN0IiwidXBkYXRlR2VuZXJhbExpc3QiLCJ1cGRhdGVQcm9qZWN0IiwidXBkYXRlIiwiZ3JhYkN1cnJlbnRQcm9qZWN0VGFza3MiLCJyZW1vdmVQcm9qZWN0IiwidG9EYXRlIiwiYXJndW1lbnQiLCJhcmdTdHIiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJEYXRlIiwiY29uc3RydWN0b3IiLCJOYU4iLCJzdGFydE9mRGF5IiwiZGF0ZSIsIl9kYXRlIiwic2V0SG91cnMiLCJpc1RvZGF5IiwiZGF0ZUxlZnQiLCJkYXRlUmlnaHQiLCJub3ciLCJkZWZhdWx0T3B0aW9ucyIsImdldERlZmF1bHRPcHRpb25zIiwic3RhcnRPZldlZWsiLCJvcHRpb25zIiwid2Vla1N0YXJ0c09uIiwibG9jYWxlIiwiZGF5IiwiZ2V0RGF5IiwiZGlmZiIsInNldERhdGUiLCJnZXREYXRlIiwiaXNUaGlzV2VlayIsImlzU2FtZVdlZWsiLCJkaXNwbGF5QWxsVGFzayIsIml0ZW1zIiwiZGlzcGxheSIsImNvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJkdWVkYXRlIiwiZGV0YWlscyIsInByaW9yaXR5IiwiZGVsZXRlQnRuIiwiZWRpdEJ0biIsImNoZWNrYm94IiwibGFiZWwiLCJ0ZXh0Q29udGVudCIsImluaXRDaGVja2JveE9uIiwicmVtb3ZlQXR0cmlidXRlIiwic3RhdHVzIiwicmVtb3ZlIiwiaW5pdENoZWNrYm94T2ZmIiwiQWxsdGFzayIsImxhc3RFbGVtZW50Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImluaXREZWxCdG4iLCJ0YXNrRm9ybSIsImdldEVsZW1lbnRCeUlkIiwidGFza1RpdGxlIiwidGFza0RldGFpbHMiLCJ0YXNrRGF0ZSIsInRhc2tQcmlvcml0eSIsImluaXRFZGl0QnRuIiwiYXBwZW5kIiwiYXBwZW5kQ2hpbGQiLCJncmFiVGFiIiwidGFiIiwiZGlzcGxheUluYm94IiwiZGlzcGxheURhaWx5IiwiZGlzcGxheVdlZWtseSIsImRpc3BsYXlQcm9qZWN0VGFza3MiLCJsaXN0IiwicmVwbGFjZSIsInByb2plY3REaXNwbGF5IiwicHJvamVjdFRhc2tCdG4iLCJwcm9qZWN0RGVsQnRuIiwic3RvcFByb3BhZ2F0aW9uIiwibmV3VGFza0Zvcm0iLCJ1cGRhdGVkUHJvamVjdHMiLCJwcm9qZWN0c0Rpc3BsYXkiLCJpbml0RGVsUHJvakJ0biIsImNyZWF0ZU5ld1Rhc2siLCJjcmVhdGVJZCIsImNyZWF0ZVRhc2siLCJpIiwicmVzZXQiLCJpbml0U3VibWl0QnRuIiwibmV3VGFza0J0biIsInRhc2tJZCIsImVkaXRlZFRhc2siLCJlZGl0VGFzayIsInN1Ym1pdFRhc2siLCJjYW5jZWxUYXNrIiwiY2FuY2VsQnRuIiwib3BlblRhc2tDcmVhdG9yIiwidG9kYXlUYWIiLCJ3ZWVrVGFiIiwiaW5ib3hUYWIiXSwic291cmNlUm9vdCI6IiJ9