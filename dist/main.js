(()=>{"use strict";const t=(()=>{let t=[];return{addToList:function(e){t.push(e),console.log(t)},TodoList:t,removeTask:function(e){return t=t.filter((t=>e!==t.id))}}})(),e=function(){const t=r.grabProjectList();var e;localStorage.setItem("project",(e=t,JSON.stringify(e))),console.log(JSON.parse(localStorage.getItem("project")))},o=function(){const t=JSON.parse(localStorage.getItem("project"));t.filter((t=>0!==t.id)).forEach((t=>{t.taskList=[],r.addToProjectList(t),p.displayProject(t)})),t[0].taskList.forEach((t=>{g.addToTasklist(t.project,t),m.updateDisplay(t.project)}))},n=(t,e,o)=>({title:t,taskList:e,id:o}),r=(()=>{let o,r=[],i=t.TodoList;const s=n("General",i,0);r.push(s);let a=0;function l(t){r.push(t),console.log(r)}return{submitProject:function(){document.querySelector("#createProject").addEventListener("click",(t=>{if(t.preventDefault(),function(){o=document.querySelector("#projectTitle").value;const t=0===r.length?0:r[r.length-1].id+1;if(""!==o){const r=n(o,[],t);console.log(r),l(r),e()}}(),""!==o){let t=r[r.length-1];p.displayProject(t),document.querySelector("#projectTitle").value="",o=""}}))},grabProjectId:function(t){let e=parseInt(t.target.getAttribute("data-projectId"));return a=e,a},grabCurrentProject:function(){return a},grabProjectList:function(){return r},projectList:r,updateGeneralList:function(t){return s.taskList=t,console.log(s.taskList),s},updateProject:function(t){let e=s.taskList.filter((e=>e.project===t));return console.log(e),0!==t?r.filter((e=>e.id===t))[0].taskList=e:void 0},grabCurrentProjectTasks:function(t){return console.log(r.filter((e=>e.id===t))[0].taskList),r.filter((e=>e.id===t))[0].taskList},removeProject:function(t){return console.log("before",r),r=r.filter((e=>e.id!==t)),console.log("after",r),r},addToProjectList:l}})();function i(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function s(t){const e=i(t);return e.setHours(0,0,0,0),e}function a(t){return e=t,o=Date.now(),+s(e)==+s(o);var e,o}let l={};function c(){return l}function d(t,e){const o=c(),n=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,r=i(t),s=r.getDay(),a=(s<n?7:0)+s-n;return r.setDate(r.getDate()-a),r.setHours(0,0,0,0),r}function u(t,e){return function(t,e,o){return+d(t,o)==+d(e,o)}(t,Date.now(),e)}const m=(()=>{function o(o,i){const s=document.createElement("div");s.setAttribute("data-taskId",`${o.id}`),s.classList.add("task");const a=document.createElement("div"),c=document.createElement("div"),d=document.createElement("div"),u=document.createElement("div"),m=document.createElement("div"),p=document.createElement("button"),g=document.createElement("button"),b=document.createElement("input"),f=document.createElement("label"),y=document.createElement("div"),L=document.createElement("img"),v=document.createElement("img"),h=document.createElement("div");return a.textContent=`${o.title}`,c.textContent=`${o.duedate}`,d.textContent=`${o.details}`,f.textContent="Done?",a.classList.add("title"),c.classList.add("duedate"),d.classList.add("details"),m.classList.add("status-cont"),f.classList.add("label"),b.classList.add("checkbox"),u.classList.add(`${o.priority}`),u.classList.add("priority"),y.classList.add("taskBtns"),p.classList.add("delete"),g.classList.add("edit"),L.classList.add("icon"),v.classList.add("icon"),h.classList.add("taskFunc"),b.setAttribute("type","checkbox"),b.setAttribute("id",`status-${o.id}`),b.setAttribute("name","status"),b.setAttribute("value","off"),f.setAttribute("for",`status-${o.id}`),p.setAttribute("data-taskId",`${o.id}`),L.setAttribute("src","img/trash-can-outline.svg"),L.setAttribute("alt","delete icon"),v.setAttribute("src","img/text-box-edit-outline.svg"),v.setAttribute("alt","edit icon"),b.addEventListener("click",(()=>{"off"===b.value?n(o,b,f,g,v,s):function(t,e,o,n,r,i){o.textContent="Done?",o.removeAttribute("style"),e.value="off",n.removeAttribute("disabled"),r.removeAttribute("style"),t.status="unfinished",i.classList.remove("finished")}(o,b,f,g,v,s),e()})),p.addEventListener("click",(()=>function(o,n){let i=t.removeTask(o);const s=document.querySelector("#general");for(r.updateGeneralList(i),r.updateProject(n),e();s.lastElementChild;)s.removeChild(s.lastElementChild);l(n),console.log(r.projectList),console.log(n)}(o.id,o.project))),g.addEventListener("click",(()=>{!function(t){const e=document.querySelector("#main-form"),o=document.querySelector(".dialog");e.classList.add("edit-mode"),e.setAttribute("data-taskId",`${t.id}`);let n=document.getElementById("title"),r=document.getElementById("details"),i=document.getElementById("date"),s=document.getElementById("priority");const a=t.title,l=t.details,c=t.duedate,d=t.priority;n.value=a,r.value=l,i.value=c,s.value=d,o.showModal()}(o)})),"finished"===o.status&&(b.setAttribute("checked",""),n(o,b,f,g,v,s)),p.append(L),g.append(v),m.append(f,b),y.append(p,g),h.append(y,m),s.append(u,a,c,d,h),i.appendChild(s),i}function n(t,e,o,n,r,i){o.textContent="Done!",o.setAttribute("style","font-weight: bold;"),e.value="on",n.setAttribute("disabled",""),r.setAttribute("style","opacity: 0.5;"),t.status="finished",i.classList.add("finished")}function s(){return document.querySelector("#general").getAttribute("class")}function l(t){let e=s();"inboxTab"===e?c():"todayTab"===e?d():"weekTab"===e?m():e===`${t}`&&0!==t&&p.displayProjectTasks(t)}function c(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector(".empty"),n=document.querySelector("#newTask"),i=document.querySelector("#general");if(n.setAttribute("data-projectId","0"),i.classList.replace(i.getAttribute("class"),"inboxTab"),0===t.length)e.removeAttribute("hidden");else{for(e.setAttribute("hidden","");i.lastElementChild;)i.removeChild(i.lastElementChild);console.log(t),t.forEach((t=>o(t,i))),console.log(r.projectList)}}function d(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector(".empty"),n=document.querySelector("#newTask"),s=document.querySelector("#general");for(n.setAttribute("data-projectId","0"),s.classList.replace(s.getAttribute("class"),"todayTab");s.lastElementChild;)s.removeChild(s.lastElementChild);const l=t.filter((t=>a(i(t.duedate))));0===l.length?e.removeAttribute("hidden"):(e.setAttribute("hidden",""),l.forEach((t=>o(t,s))))}function m(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector(".empty"),n=document.querySelector("#newTask"),s=document.querySelector("#general");for(n.setAttribute("data-projectId","0"),s.classList.replace(s.getAttribute("class"),"weekTab");s.lastElementChild;)s.removeChild(s.lastElementChild);const a=t.filter((t=>u(i(t.duedate))));0===a.length?e.removeAttribute("hidden"):(e.setAttribute("hidden",""),a.forEach((t=>o(t,s))))}return{displayInbox:c,displayDaily:d,displayWeekly:m,displayAllTask:o,updateDisplay:l,grabTab:s}})(),p=(()=>{function o(t){const e=document.querySelector(".empty"),o=document.querySelector("#general");for(o.classList.replace(o.getAttribute("class"),`${t}`);o.lastElementChild;)o.removeChild(o.lastElementChild);let n=r.grabCurrentProjectTasks(t);0===n.length?e.removeAttribute("hidden"):(e.setAttribute("hidden",""),n.forEach((t=>m.displayAllTask(t,o))))}return{displayProject:function n(i){const s=document.querySelector("#newTask"),a=document.querySelector(".all-projects"),l=document.createElement("div"),c=document.createElement("div"),d=document.createElement("button"),u=document.createElement("img");return l.classList.add(`project-${i.id}`),l.classList.add("container-project"),c.classList.add("project-title"),d.classList.add("del-project"),u.classList.add("projDelImg"),l.setAttribute("data-projectId",`${i.id}`),d.setAttribute("hidden",""),u.setAttribute("src","img/trash-can-outline.svg"),u.setAttribute("alt","delete icon"),c.textContent=`${i.title}`,l.addEventListener("click",(t=>{t.stopPropagation(),s.setAttribute("data-projectId",`${i.id}`),o(i.id)})),l.addEventListener("mouseover",(()=>{d.removeAttribute("hidden"),l.setAttribute("style","border: 2px solid black;")})),l.addEventListener("mouseleave",(()=>{d.setAttribute("hidden",""),l.removeAttribute("style")})),d.addEventListener("click",(o=>{o.stopPropagation(),function(o){r.removeProject(o);let i=r.grabProjectList();t.TodoList.filter((t=>t.project===o)).forEach((e=>{let o=t.removeTask(e.id);r.updateGeneralList(o)}));let s=document.querySelector(".all-projects");for(;s.lastElementChild;)s.removeChild(s.lastElementChild);i.forEach((t=>{t.id>0&&n(t)})),parseInt(m.grabTab(o))===o?m.displayInbox():m.updateDisplay(o),e()}(i.id)})),d.appendChild(u),l.append(c,d),a.appendChild(l),a},displayProjectTasks:o}})(),g=(()=>{let o,n;function s(){r.grabProjectList(),o=document.getElementById("title").value,n=document.getElementById("details").value;let t=document.getElementById("date").value,e=document.getElementById("priority").value,s=function(){let t=r.grabProjectList()[0].taskList;return 0===t.length?0:t[t.length-1].id+1}(),c=r.grabCurrentProject();if(console.log(u(i(t))),console.log(a(i(t))),""===o||""===n||""===t)return;const d=((t,e,o,n,r,i,s)=>({id:t,title:e,details:o,duedate:n,priority:r,project:i,status:"unfinished"}))(s,o,n,t,e,c);console.log(d),l(c,d)}function l(e,o){const n=r.grabProjectList();0===e&&(n[0].taskList.push(o),console.log(n));for(let r=1;r<n.length;r++)n[r].id===e&&(t.addToList(o),n[r].taskList.push(o),console.log(n))}function c(){document.getElementById("title").value="",o="",document.getElementById("details").value="",n="",document.getElementById("date").value="",document.getElementById("priority").value="Low"}return{createNewTask:s,initSubmitBtn:function(){document.querySelector("#submit").addEventListener("click",(t=>{!function(){const t=document.querySelector("#main-form"),i=parseInt(t.getAttribute("data-taskId")),a=document.querySelector(".dialog");if(t.classList.contains("edit-mode")?(console.log("werk"),function(t){let e=document.getElementById("title").value,i=document.getElementById("details").value,s=document.getElementById("date").value,a=document.getElementById("priority").value;const l=r.grabProjectList()[0].taskList,c=l.filter((e=>t===e.id))[0];c.title=e,c.details=i,c.duedate=s,c.priority=a,o=e,n=i;for(let e=0;e<l.length;e++)l[e].id===t&&(l[e]=c,r.updateProject(l[e].project),console.log(r.grabProjectList()))}(i)):s(),e(),""===o||""===n)return;let l,d=r.grabProjectList()[0].taskList;t.classList.contains("edit-mode")?(l=d.filter((t=>i===t.id))[0].project,t.classList.remove("edit-mode")):l=d[d.length-1].project,m.updateDisplay(l),c(),a.close()}(),t.preventDefault()}))},cancelTask:function(){const t=document.querySelector("#cancel"),e=document.querySelector(".dialog");t.addEventListener("click",(t=>{c(),e.close(),t.preventDefault()}))},openTaskCreator:function(){const t=document.querySelector("#newTask"),e=document.querySelector(".dialog");t.addEventListener("click",(t=>{r.grabProjectId(t),e.showModal(),t.preventDefault()}))},addToTasklist:l}})();g.initSubmitBtn(),g.cancelTask(),g.openTaskCreator(),r.submitProject();const b=document.querySelector("#today"),f=document.querySelector("#weekly"),y=document.querySelector("#inbox");b.addEventListener("click",m.displayDaily),f.addEventListener("click",m.displayWeekly),y.addEventListener("click",m.displayInbox),document.addEventListener("DOMContentLoaded",o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,