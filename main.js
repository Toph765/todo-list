(()=>{"use strict";const t=(()=>{let t=[];return{addToList:function(e){t.push(e),console.log(t)},TodoList:t,removeTask:function(e){return t=t.filter((t=>e!==t.id))}}})(),e=function(){const t=r.grabProjectList();var e;localStorage.setItem("project",(e=t,JSON.stringify(e))),console.log(JSON.parse(localStorage.getItem("project")))},o=function(){const e=JSON.parse(localStorage.getItem("project"));e[0].taskList.forEach((e=>{t.addToList(e),m.updateDisplay(e.project)})),e.filter((t=>0!==t.id)).forEach((t=>{r.addToProjectList(t),p.displayProject(t)}))},n=(t,e,o)=>({title:t,taskList:e,id:o}),r=(()=>{let o,r=[],i=t.TodoList;const l=n("General",i,0);r.push(l);let c=0;function a(t){r.push(t),console.log(r)}return{submitProject:function(){document.querySelector("#createProject").addEventListener("click",(t=>{if(t.preventDefault(),function(){o=document.querySelector("#projectTitle").value;const t=0===r.length?0:r[r.length-1].id+1;if(""!==o){const r=n(o,[],t);console.log(r),a(r),e()}}(),""!==o){let t=r[r.length-1];p.displayProject(t),document.querySelector("#projectTitle").value="",o=""}}))},grabProjectId:function(t){let e=parseInt(t.target.getAttribute("data-projectId"));return c=e,c},grabCurrentProject:function(){return c},grabProjectList:function(){return r},projectList:r,updateGeneralList:function(t){return l.taskList=t,console.log(l.taskList),l},updateProject:function(t){let e=l.taskList.filter((e=>e.project===t));return console.log(e),0!==t?r.filter((e=>e.id===t))[0].taskList=e:void 0},grabCurrentProjectTasks:function(t){return console.log(r.filter((e=>e.id===t))[0].taskList),r.filter((e=>e.id===t))[0].taskList},removeProject:function(t){return console.log("before",r),r=r.filter((e=>e.id!==t)),console.log("after",r),r},addToProjectList:a}})();function i(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function l(t){const e=i(t);return e.setHours(0,0,0,0),e}function c(t){return e=t,o=Date.now(),+l(e)==+l(o);var e,o}let a={};function s(){return a}function d(t,e){const o=s(),n=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,r=i(t),l=r.getDay(),c=(l<n?7:0)+l-n;return r.setDate(r.getDate()-c),r.setHours(0,0,0,0),r}function u(t,e){return function(t,e,o){return+d(t,o)==+d(e,o)}(t,Date.now(),e)}const m=(()=>{function o(o,i){const l=document.createElement("div");l.setAttribute("data-taskId",`${o.id}`),l.classList.add("task");const c=document.createElement("div"),s=document.createElement("div"),d=document.createElement("div"),u=document.createElement("div"),m=document.createElement("button"),p=document.createElement("button"),f=document.createElement("input"),g=document.createElement("label");return c.textContent=`Title: ${o.title}`,s.textContent=`Due Date: ${o.duedate}`,d.textContent=`Details: ${o.details}`,u.textContent=`Priority: ${o.priority}`,m.textContent="delete",p.textContent="edit",g.textContent="Done?",f.setAttribute("type","checkbox"),f.setAttribute("id",`status-${o.id}`),f.setAttribute("name","status"),f.setAttribute("value","off"),g.setAttribute("for",`status-${o.id}`),m.setAttribute("data-taskId",`${o.id}`),f.addEventListener("click",(()=>{"off"===f.value?n(o,f,g,p,l):function(t,e,o,n,r){o.textContent="Done?",e.value="off",n.removeAttribute("disabled"),t.status="unfinished",r.classList.remove("finished")}(o,f,g,p,l),e()})),m.addEventListener("click",(()=>function(o,n){let i=t.removeTask(o);const l=document.querySelector("#general");for(r.updateGeneralList(i),r.updateProject(n),e();l.lastElementChild;)l.removeChild(l.lastElementChild);a(n),console.log(r.projectList),console.log(n)}(o.id,o.project))),p.addEventListener("click",(()=>{!function(t){const e=document.querySelector("#main-form");e.classList.add("edit-mode"),e.setAttribute("data-taskId",`${t.id}`);let o=document.getElementById("title"),n=document.getElementById("details"),r=document.getElementById("date"),i=document.getElementById("priority");const l=t.title,c=t.details,a=t.duedate,s=t.priority;o.value=l,n.value=c,r.value=a,i.value=s,e.removeAttribute("hidden")}(o)})),"finished"===o.status&&(f.setAttribute("checked",""),n(o,f,g,p,l)),l.append(c,s,d,u,m,p,g,f),i.appendChild(l),i}function n(t,e,o,n,r){o.textContent="Done!",e.value="on",n.setAttribute("disabled",""),t.status="finished",r.classList.add("finished")}function l(){return document.querySelector("#general").getAttribute("class")}function a(t){let e=l();"inboxTab"===e?s():"todayTab"===e?d():"weekTab"===e?m():e===`${t}`&&0!==t&&p.displayProjectTasks(t)}function s(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),"inboxTab");e.lastElementChild;)e.removeChild(e.lastElementChild);console.log(t),t.forEach((t=>o(t,e))),console.log(r.projectList)}function d(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),"todayTab");e.lastElementChild;)e.removeChild(e.lastElementChild);t.filter((t=>c(i(t.duedate)))).forEach((t=>o(t,e)))}function m(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),"weekTab");e.lastElementChild;)e.removeChild(e.lastElementChild);t.filter((t=>u(i(t.duedate)))).forEach((t=>o(t,e)))}return{displayInbox:s,displayDaily:d,displayWeekly:m,displayAllTask:o,updateDisplay:a,grabTab:l}})(),p=(()=>{function o(t){r.projectList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),`${t}`);e.lastElementChild;)e.removeChild(e.lastElementChild);r.grabCurrentProjectTasks(t).forEach((t=>m.displayAllTask(t,e)))}return{displayProject:function n(i){const l=document.querySelector(".all-projects"),c=document.createElement("div"),a=document.createElement("div"),s=document.createElement("button"),d=document.createElement("button");return c.classList.add(`project-${i.id}`),c.setAttribute("data-projectId",`${i.id}`),s.setAttribute("data-projectId",`${i.id}`),s.setAttribute("id",`project-${i.id}`),a.textContent=`${i.title}`,s.textContent="+",d.textContent="delete",c.addEventListener("click",(t=>{t.stopPropagation(),o(i.id)})),s.addEventListener("click",(t=>{t.stopPropagation(),console.log("project id",r.grabProjectId(t));const e=document.querySelector("#main-form");r.grabProjectId(t),e.removeAttribute("hidden"),t.preventDefault()})),d.addEventListener("click",(o=>{o.stopPropagation(),function(o){r.removeProject(o);let i=r.grabProjectList();t.TodoList.filter((t=>t.project===o)).forEach((e=>{let o=t.removeTask(e.id);r.updateGeneralList(o)}));let l=document.querySelector(".all-projects");for(;l.lastElementChild;)l.removeChild(l.lastElementChild);i.forEach((t=>{t.id>0&&n(t)})),parseInt(m.grabTab(o))===o?m.displayInbox():m.updateDisplay(o),e()}(i.id)})),c.append(a,s,d),l.appendChild(c),l},displayProjectTasks:o}})(),f=(()=>{let o,n;function l(){const e=r.grabProjectList();o=document.getElementById("title").value,n=document.getElementById("details").value;let l=document.getElementById("date").value,a=document.getElementById("priority").value,s=function(){let t=r.grabProjectList()[0].taskList;return 0===t.length?0:t[t.length-1].id+1}(),d=r.grabCurrentProject();if(console.log(u(i(l))),console.log(c(i(l))),""!==o&&""!==n&&""!==l){const r=((t,e,o,n,r,i,l)=>({id:t,title:e,details:o,duedate:n,priority:r,project:i,status:"unfinished"}))(s,o,n,l,a,d);console.log(r),0===d&&(e[0].taskList.push(r),console.log(e));for(let o=1;o<e.length;o++)e[o].id===d&&(t.addToList(r),e[o].taskList.push(r),console.log(e))}}function a(){document.getElementById("title").value="",o="",document.getElementById("details").value="",n="",document.getElementById("date").value="",document.getElementById("priority").value="Low"}return{createNewTask:l,initSubmitBtn:function(){document.querySelector("#submit").addEventListener("click",(t=>{!function(){const t=document.querySelector("#main-form"),i=document.querySelector("#newTask"),c=parseInt(t.getAttribute("data-taskId"));if("edit-mode"===t.getAttribute("class")?(console.log("werk"),function(t){let e=document.getElementById("title").value,i=document.getElementById("details").value,l=document.getElementById("date").value,c=document.getElementById("priority").value;const a=r.grabProjectList()[0].taskList,s=a.filter((e=>t===e.id))[0];s.title=e,s.details=i,s.duedate=l,s.priority=c,o=e,n=i;for(let e=0;e<a.length;e++)a[e].id===t&&(a[e]=s,r.updateProject(a[e].project),console.log(r.grabProjectList()))}(c)):l(),e(),""===o||""===n)return;let s,d=r.grabProjectList()[0].taskList;"edit-mode"===t.getAttribute("class")?(s=d.filter((t=>c===t.id))[0].project,t.classList.remove("edit-mode")):s=d[d.length-1].project,m.updateDisplay(s),a(),t.setAttribute("hidden",""),i.removeAttribute("hidden")}(),t.preventDefault()}))},cancelTask:function(){const t=document.querySelector("#cancel"),e=document.querySelector("#main-form"),o=document.querySelector("#newTask");t.addEventListener("click",(t=>{a(),e.setAttribute("hidden",""),o.removeAttribute("hidden"),t.preventDefault()}))},openTaskCreator:function(){const t=document.querySelector("#newTask"),e=document.querySelector("#main-form");t.addEventListener("click",(o=>{r.grabProjectId(o),e.removeAttribute("hidden"),t.setAttribute("hidden",""),o.preventDefault()}))}}})();f.initSubmitBtn(),f.cancelTask(),f.openTaskCreator(),r.submitProject();const g=document.querySelector("#today"),b=document.querySelector("#weekly"),y=document.querySelector("#inbox");g.addEventListener("click",m.displayDaily),b.addEventListener("click",m.displayWeekly),y.addEventListener("click",m.displayInbox),document.addEventListener("DOMContentLoaded",o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,