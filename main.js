(()=>{"use strict";const t=(()=>{let t=[];return{addToList:function(e){t.push(e),console.log(t)},TodoList:t,removeTask:function(e){return t=t.filter((t=>e!==t.id))}}})(),e=function(){const t=r.grabProjectList();var e;localStorage.setItem("project",(e=t,JSON.stringify(e))),console.log(JSON.parse(localStorage.getItem("project")))},o=function(){const e=JSON.parse(localStorage.getItem("project"));e[0].taskList.forEach((e=>{t.addToList(e),m.updateDisplay(e.project)})),e.filter((t=>0!==t.id)).forEach((t=>{r.addToProjectList(t),p.displayProject(t)}))},n=(t,e,o)=>({title:t,taskList:e,id:o}),r=(()=>{let o,r=[],i=t.TodoList;const c=n("General",i,0);r.push(c);let l=0;function a(t){r.push(t),console.log(r)}return{submitProject:function(){document.querySelector("#createProject").addEventListener("click",(t=>{if(t.preventDefault(),function(){o=document.querySelector("#projectTitle").value;const t=0===r.length?0:r[r.length-1].id+1;if(""!==o){const r=n(o,[],t);console.log(r),a(r),e()}}(),""!==o){let t=r[r.length-1];p.displayProject(t),document.querySelector("#projectTitle").value="",o=""}}))},grabProjectId:function(t){let e=parseInt(t.target.getAttribute("data-projectId"));return l=e,l},grabCurrentProject:function(){return l},grabProjectList:function(){return r},projectList:r,updateGeneralList:function(t){return c.taskList=t,console.log(c.taskList),c},updateProject:function(t){let e=c.taskList.filter((e=>e.project===t));return console.log(e),0!==t?r.filter((e=>e.id===t))[0].taskList=e:void 0},grabCurrentProjectTasks:function(t){return console.log(r.filter((e=>e.id===t))[0].taskList),r.filter((e=>e.id===t))[0].taskList},removeProject:function(t){return console.log("before",r),r=r.filter((e=>e.id!==t)),console.log("after",r),r},addToProjectList:a}})();function i(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function c(t){const e=i(t);return e.setHours(0,0,0,0),e}function l(t){return e=t,o=Date.now(),+c(e)==+c(o);var e,o}let a={};function d(){return a}function s(t,e){const o=d(),n=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,r=i(t),c=r.getDay(),l=(c<n?7:0)+c-n;return r.setDate(r.getDate()-l),r.setHours(0,0,0,0),r}function u(t,e){return function(t,e,o){return+s(t,o)==+s(e,o)}(t,Date.now(),e)}const m=(()=>{function o(o,n){const i=document.createElement("div");i.setAttribute("data-taskId",`${o.id}`),i.classList.add("task");const l=document.createElement("div"),a=document.createElement("div"),d=document.createElement("div"),s=document.createElement("div"),u=document.createElement("button"),m=document.createElement("button");return l.textContent=`Title: ${o.title}`,a.textContent=`Due Date: ${o.duedate}`,d.textContent=`Description: ${o.description}`,s.textContent=`Priority: ${o.priority}`,u.textContent="delete",m.textContent="edit",u.setAttribute("data-taskId",`${o.id}`),u.addEventListener("click",(()=>function(o,n){let i=t.removeTask(o);const l=document.querySelector("#general");for(r.updateGeneralList(i),r.updateProject(n),e();l.lastElementChild;)l.removeChild(l.lastElementChild);c(n),console.log(r.projectList),console.log(n)}(o.id,o.project))),m.addEventListener("click",(()=>{!function(t){const e=document.querySelector("#main-form");e.classList.add("edit-mode"),e.setAttribute("data-taskId",`${t.id}`);let o=document.getElementById("title"),n=document.getElementById("description"),r=document.getElementById("date"),i=document.getElementById("priority");const c=t.title,l=t.description,a=t.duedate,d=t.priority;o.value=c,n.value=l,r.value=a,i.value=d,e.removeAttribute("hidden")}(o)})),i.append(l,a,d,s,u,m),n.appendChild(i),n}function n(){return document.querySelector("#general").getAttribute("class")}function c(t){let e=n();"inboxTab"===e?a():"todayTab"===e?d():"weekTab"===e?s():e===`${t}`&&0!==t&&p.displayProjectTasks(t)}function a(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),"inboxTab");e.lastElementChild;)e.removeChild(e.lastElementChild);console.log(t),t.forEach((t=>o(t,e))),console.log(r.projectList)}function d(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),"todayTab");e.lastElementChild;)e.removeChild(e.lastElementChild);t.filter((t=>l(i(t.duedate)))).forEach((t=>o(t,e)))}function s(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),"weekTab");e.lastElementChild;)e.removeChild(e.lastElementChild);t.filter((t=>u(i(t.duedate)))).forEach((t=>o(t,e)))}return{displayInbox:a,displayDaily:d,displayWeekly:s,displayAllTask:o,updateDisplay:c,grabTab:n}})(),p=(()=>{function o(t){r.projectList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),`${t}`);e.lastElementChild;)e.removeChild(e.lastElementChild);r.grabCurrentProjectTasks(t).forEach((t=>m.displayAllTask(t,e)))}return{displayProject:function n(i){const c=document.querySelector(".all-projects"),l=document.createElement("div"),a=document.createElement("div"),d=document.createElement("button"),s=document.createElement("button");return l.classList.add(`project-${i.id}`),l.setAttribute("data-projectId",`${i.id}`),d.setAttribute("data-projectId",`${i.id}`),d.setAttribute("id",`project-${i.id}`),a.textContent=`${i.title}`,d.textContent="+",s.textContent="delete",l.addEventListener("click",(t=>{t.stopPropagation(),o(i.id)})),d.addEventListener("click",(t=>{t.stopPropagation(),console.log("project id",r.grabProjectId(t));const e=document.querySelector("#main-form");r.grabProjectId(t),e.removeAttribute("hidden"),t.preventDefault()})),s.addEventListener("click",(o=>{o.stopPropagation(),function(o){r.removeProject(o);let i=r.grabProjectList();t.TodoList.filter((t=>t.project===o)).forEach((e=>{let o=t.removeTask(e.id);r.updateGeneralList(o)}));let c=document.querySelector(".all-projects");for(;c.lastElementChild;)c.removeChild(c.lastElementChild);i.forEach((t=>{t.id>0&&n(t)})),parseInt(m.grabTab(o))===o?m.displayInbox():m.updateDisplay(o),e()}(i.id)})),l.append(a,d,s),c.appendChild(l),c},displayProjectTasks:o}})(),g=(()=>{let o,n;function c(){const e=r.grabProjectList();o=document.getElementById("title").value,n=document.getElementById("description").value;let c=document.getElementById("date").value,a=document.getElementById("priority").value,d=function(){let t=r.grabProjectList()[0].taskList;return 0===t.length?0:t[t.length-1].id+1}(),s=r.grabCurrentProject();if(console.log(u(i(c))),console.log(l(i(c))),""!==o&&""!==n&&""!==c){const r=((t,e,o,n,r,i)=>({id:t,title:e,description:o,duedate:n,priority:r,project:i}))(d,o,n,c,a,s);console.log(r),0===s&&(e[0].taskList.push(r),console.log(e));for(let o=1;o<e.length;o++)e[o].id===s&&(t.addToList(r),e[o].taskList.push(r),console.log(e))}}function a(){document.getElementById("title").value="",o="",document.getElementById("description").value="",n="",document.getElementById("date").value="",document.getElementById("priority").value="Low"}return{createNewTask:c,initSubmitBtn:function(){document.querySelector("#submit").addEventListener("click",(t=>{!function(){const t=document.querySelector("#main-form"),i=document.querySelector("#newTask"),l=parseInt(t.getAttribute("data-taskId"));if("edit-mode"===t.getAttribute("class")?(console.log("werk"),function(t){let e=document.getElementById("title").value,i=document.getElementById("description").value,c=document.getElementById("date").value,l=document.getElementById("priority").value;const a=r.grabProjectList()[0].taskList,d=a.filter((e=>t===e.id))[0];d.title=e,d.description=i,d.duedate=c,d.priority=l,o=e,n=i;for(let e=0;e<a.length;e++)a[e].id===t&&(a[e]=d,r.updateProject(a[e].project),console.log(r.grabProjectList()))}(l)):c(),e(),""===o||""===n)return;let d,s=r.grabProjectList()[0].taskList;"edit-mode"===t.getAttribute("class")?(d=s.filter((t=>l===t.id))[0].project,t.classList.remove("edit-mode")):d=s[s.length-1].project,m.updateDisplay(d),a(),t.setAttribute("hidden",""),i.removeAttribute("hidden")}(),t.preventDefault()}))},cancelTask:function(){const t=document.querySelector("#cancel"),e=document.querySelector("#main-form"),o=document.querySelector("#newTask");t.addEventListener("click",(t=>{a(),e.setAttribute("hidden",""),o.removeAttribute("hidden"),t.preventDefault()}))},openTaskCreator:function(){const t=document.querySelector("#newTask"),e=document.querySelector("#main-form");t.addEventListener("click",(o=>{r.grabProjectId(o),e.removeAttribute("hidden"),t.setAttribute("hidden",""),o.preventDefault()}))}}})();g.initSubmitBtn(),g.cancelTask(),g.openTaskCreator(),r.submitProject();const f=document.querySelector("#today"),y=document.querySelector("#weekly"),b=document.querySelector("#inbox");f.addEventListener("click",m.displayDaily),y.addEventListener("click",m.displayWeekly),b.addEventListener("click",m.displayInbox),document.addEventListener("DOMContentLoaded",o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,