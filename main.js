(()=>{"use strict";const t=(()=>{let t=[];return{addToList:function(e){t.push(e),console.log(t)},TodoList:t,removeTask:function(e){return t=t.filter((t=>e!==t.id))}}})(),e=function(){const t=r.grabProjectList();var e;localStorage.setItem("project",(e=t,JSON.stringify(e))),console.log(JSON.parse(localStorage.getItem("project")))},o=function(){const t=JSON.parse(localStorage.getItem("project"));t.filter((t=>0!==t.id)).forEach((t=>{t.taskList=[],r.addToProjectList(t),p.displayProject(t)})),t[0].taskList.forEach((t=>{f.addToTasklist(t.project,t),m.updateDisplay(t.project)}))},n=(t,e,o)=>({title:t,taskList:e,id:o}),r=(()=>{let o,r=[],i=t.TodoList;const c=n("General",i,0);r.push(c);let l=0;function a(t){r.push(t),console.log(r)}return{submitProject:function(){document.querySelector("#createProject").addEventListener("click",(t=>{if(t.preventDefault(),function(){o=document.querySelector("#projectTitle").value;const t=0===r.length?0:r[r.length-1].id+1;if(""!==o){const r=n(o,[],t);console.log(r),a(r),e()}}(),""!==o){let t=r[r.length-1];p.displayProject(t),document.querySelector("#projectTitle").value="",o=""}}))},grabProjectId:function(t){let e=parseInt(t.target.getAttribute("data-projectId"));return l=e,l},grabCurrentProject:function(){return l},grabProjectList:function(){return r},projectList:r,updateGeneralList:function(t){return c.taskList=t,console.log(c.taskList),c},updateProject:function(t){let e=c.taskList.filter((e=>e.project===t));return console.log(e),0!==t?r.filter((e=>e.id===t))[0].taskList=e:void 0},grabCurrentProjectTasks:function(t){return console.log(r.filter((e=>e.id===t))[0].taskList),r.filter((e=>e.id===t))[0].taskList},removeProject:function(t){return console.log("before",r),r=r.filter((e=>e.id!==t)),console.log("after",r),r},addToProjectList:a}})();function i(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function c(t){const e=i(t);return e.setHours(0,0,0,0),e}function l(t){return e=t,o=Date.now(),+c(e)==+c(o);var e,o}let a={};function s(){return a}function d(t,e){const o=s(),n=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,r=i(t),c=r.getDay(),l=(c<n?7:0)+c-n;return r.setDate(r.getDate()-l),r.setHours(0,0,0,0),r}function u(t,e){return function(t,e,o){return+d(t,o)==+d(e,o)}(t,Date.now(),e)}const m=(()=>{function o(o,i){const c=document.createElement("div");c.setAttribute("data-taskId",`${o.id}`),c.classList.add("task");const l=document.createElement("div"),s=document.createElement("div"),d=document.createElement("div"),u=document.createElement("div"),m=document.createElement("button"),p=document.createElement("button"),f=document.createElement("input"),g=document.createElement("label");return l.textContent=`Title: ${o.title}`,s.textContent=`Due Date: ${o.duedate}`,d.textContent=`Details: ${o.details}`,u.textContent=`Priority: ${o.priority}`,m.textContent="delete",p.textContent="edit",g.textContent="Done?",f.setAttribute("type","checkbox"),f.setAttribute("id",`status-${o.id}`),f.setAttribute("name","status"),f.setAttribute("value","off"),g.setAttribute("for",`status-${o.id}`),m.setAttribute("data-taskId",`${o.id}`),f.addEventListener("click",(()=>{"off"===f.value?n(o,f,g,p,c):function(t,e,o,n,r){o.textContent="Done?",e.value="off",n.removeAttribute("disabled"),t.status="unfinished",r.classList.remove("finished")}(o,f,g,p,c),e()})),m.addEventListener("click",(()=>function(o,n){let i=t.removeTask(o);const c=document.querySelector("#general");for(r.updateGeneralList(i),r.updateProject(n),e();c.lastElementChild;)c.removeChild(c.lastElementChild);a(n),console.log(r.projectList),console.log(n)}(o.id,o.project))),p.addEventListener("click",(()=>{!function(t){const e=document.querySelector("#main-form");e.classList.add("edit-mode"),e.setAttribute("data-taskId",`${t.id}`);let o=document.getElementById("title"),n=document.getElementById("details"),r=document.getElementById("date"),i=document.getElementById("priority");const c=t.title,l=t.details,a=t.duedate,s=t.priority;o.value=c,n.value=l,r.value=a,i.value=s,e.removeAttribute("hidden")}(o)})),"finished"===o.status&&(f.setAttribute("checked",""),n(o,f,g,p,c)),c.append(l,s,d,u,m,p,g,f),i.appendChild(c),i}function n(t,e,o,n,r){o.textContent="Done!",e.value="on",n.setAttribute("disabled",""),t.status="finished",r.classList.add("finished")}function c(){return document.querySelector("#general").getAttribute("class")}function a(t){let e=c();"inboxTab"===e?s():"todayTab"===e?d():"weekTab"===e?m():e===`${t}`&&0!==t&&p.displayProjectTasks(t)}function s(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector("#newTask"),n=document.querySelector("#general");for(e.setAttribute("data-projectId","0"),n.classList.replace(n.getAttribute("class"),"inboxTab");n.lastElementChild;)n.removeChild(n.lastElementChild);console.log(t),t.forEach((t=>o(t,n))),console.log(r.projectList)}function d(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector("#newTask"),n=document.querySelector("#general");for(e.setAttribute("data-projectId","0"),n.classList.replace(n.getAttribute("class"),"todayTab");n.lastElementChild;)n.removeChild(n.lastElementChild);t.filter((t=>l(i(t.duedate)))).forEach((t=>o(t,n)))}function m(){let t=r.grabProjectList()[0].taskList;const e=document.querySelector("#newTask"),n=document.querySelector("#general");for(e.setAttribute("data-projectId","0"),n.classList.replace(n.getAttribute("class"),"weekTab");n.lastElementChild;)n.removeChild(n.lastElementChild);t.filter((t=>u(i(t.duedate)))).forEach((t=>o(t,n)))}return{displayInbox:s,displayDaily:d,displayWeekly:m,displayAllTask:o,updateDisplay:a,grabTab:c}})(),p=(()=>{function o(t){r.projectList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),`${t}`);e.lastElementChild;)e.removeChild(e.lastElementChild);r.grabCurrentProjectTasks(t).forEach((t=>m.displayAllTask(t,e)))}return{displayProject:function n(i){const c=document.querySelector("#newTask"),l=document.querySelector(".all-projects"),a=document.createElement("div"),s=document.createElement("div"),d=document.createElement("button");return a.classList.add(`project-${i.id}`),a.classList.add("container-project"),a.setAttribute("data-projectId",`${i.id}`),d.classList.add("del-project"),s.textContent=`${i.title}`,d.textContent="delete",a.addEventListener("click",(t=>{t.stopPropagation(),c.setAttribute("data-projectId",`${i.id}`),o(i.id)})),d.addEventListener("click",(o=>{o.stopPropagation(),function(o){r.removeProject(o);let i=r.grabProjectList();t.TodoList.filter((t=>t.project===o)).forEach((e=>{let o=t.removeTask(e.id);r.updateGeneralList(o)}));let c=document.querySelector(".all-projects");for(;c.lastElementChild;)c.removeChild(c.lastElementChild);i.forEach((t=>{t.id>0&&n(t)})),parseInt(m.grabTab(o))===o?m.displayInbox():m.updateDisplay(o),e()}(i.id)})),a.append(s,d),l.appendChild(a),l},displayProjectTasks:o}})(),f=(()=>{let o,n;function c(){r.grabProjectList(),o=document.getElementById("title").value,n=document.getElementById("details").value;let t=document.getElementById("date").value,e=document.getElementById("priority").value,c=function(){let t=r.grabProjectList()[0].taskList;return 0===t.length?0:t[t.length-1].id+1}(),s=r.grabCurrentProject();if(console.log(u(i(t))),console.log(l(i(t))),""===o||""===n||""===t)return;const d=((t,e,o,n,r,i,c)=>({id:t,title:e,details:o,duedate:n,priority:r,project:i,status:"unfinished"}))(c,o,n,t,e,s);console.log(d),a(s,d)}function a(e,o){const n=r.grabProjectList();0===e&&(n[0].taskList.push(o),console.log(n));for(let r=1;r<n.length;r++)n[r].id===e&&(t.addToList(o),n[r].taskList.push(o),console.log(n))}function s(){document.getElementById("title").value="",o="",document.getElementById("details").value="",n="",document.getElementById("date").value="",document.getElementById("priority").value="Low"}return{createNewTask:c,initSubmitBtn:function(){document.querySelector("#submit").addEventListener("click",(t=>{!function(){const t=document.querySelector("#main-form"),i=document.querySelector("#newTask"),l=parseInt(t.getAttribute("data-taskId"));if("edit-mode"===t.getAttribute("class")?(console.log("werk"),function(t){let e=document.getElementById("title").value,i=document.getElementById("details").value,c=document.getElementById("date").value,l=document.getElementById("priority").value;const a=r.grabProjectList()[0].taskList,s=a.filter((e=>t===e.id))[0];s.title=e,s.details=i,s.duedate=c,s.priority=l,o=e,n=i;for(let e=0;e<a.length;e++)a[e].id===t&&(a[e]=s,r.updateProject(a[e].project),console.log(r.grabProjectList()))}(l)):c(),e(),""===o||""===n)return;let a,d=r.grabProjectList()[0].taskList;"edit-mode"===t.getAttribute("class")?(a=d.filter((t=>l===t.id))[0].project,t.classList.remove("edit-mode")):a=d[d.length-1].project,m.updateDisplay(a),s(),t.setAttribute("hidden",""),i.removeAttribute("hidden")}(),t.preventDefault()}))},cancelTask:function(){const t=document.querySelector("#cancel"),e=document.querySelector("#main-form"),o=document.querySelector("#newTask");t.addEventListener("click",(t=>{s(),e.setAttribute("hidden",""),o.removeAttribute("hidden"),t.preventDefault()}))},openTaskCreator:function(){const t=document.querySelector("#newTask"),e=document.querySelector("#main-form");t.addEventListener("click",(o=>{r.grabProjectId(o),e.removeAttribute("hidden"),t.setAttribute("hidden",""),o.preventDefault()}))},addToTasklist:a}})();f.initSubmitBtn(),f.cancelTask(),f.openTaskCreator(),r.submitProject();const g=document.querySelector("#today"),b=document.querySelector("#weekly"),y=document.querySelector("#inbox");g.addEventListener("click",m.displayDaily),b.addEventListener("click",m.displayWeekly),y.addEventListener("click",m.displayInbox),document.addEventListener("DOMContentLoaded",o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,