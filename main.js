(()=>{"use strict";const t=(()=>{let t=[];return{addToList:function(e){t.push(e),console.log(t)},TodoList:t,removeTask:function(e){return t=t.filter((t=>e!==t.id))}}})(),e=(t,e,n)=>({title:t,taskList:e,id:n}),n=(()=>{let n,o=[],r=t.TodoList;const c=e("General",r,0);o.push(c);let i=0;return{submitProject:function(){document.querySelector("#createProject").addEventListener("click",(t=>{t.preventDefault(),function(){n=document.querySelector("#projectTitle").value;const t=0===o.length?0:o[o.length-1].id+1;if(""!==n){const r=e(n,[],t);console.log(r),function(t){o.push(t),console.log(o)}(r)}}(),""!==n&&(u.displayProject(),document.querySelector("#projectTitle").value="",n="")}))},grabProjectId:function(t){let e=parseInt(t.target.getAttribute("data-projectId"));return i=e,i},grabCurrentProject:function(){return i},grabProjectList:function(){return o},projectList:o,updateGeneralList:function(t){return c.taskList=t,console.log(c.taskList),c},updateProjectList:function(t){let e=c.taskList.filter((e=>e.project===t));return console.log(e),0!==t?o.filter((e=>e.id===t))[0].taskList=e:void 0},grabCurrentProjectTasks:function(t){return console.log(o.filter((e=>e.id===t))[0].taskList),o.filter((e=>e.id===t))[0].taskList}}})();function o(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function r(t){const e=o(t);return e.setHours(0,0,0,0),e}function c(t){return e=t,n=Date.now(),+r(e)==+r(n);var e,n}let i={};function l(){return i}function s(t,e){const n=l(),r=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,c=o(t),i=c.getDay(),s=(i<r?7:0)+i-r;return c.setDate(c.getDate()-s),c.setHours(0,0,0,0),c}function a(t,e){return function(t,e,n){return+s(t,n)==+s(e,n)}(t,Date.now(),e)}const d=(()=>{function e(e,o){const c=document.createElement("div");c.setAttribute("data-taskId",`${e.id}`),c.classList.add("task");const i=document.createElement("div"),l=document.createElement("div"),s=document.createElement("div"),a=document.createElement("div"),d=document.createElement("button");return i.textContent=`Title: ${e.title}`,l.textContent=`Due Date: ${e.duedate}`,s.textContent=`Description: ${e.description}`,a.textContent=`Priority: ${e.priority}`,d.textContent="delete",d.setAttribute("data-taskId",`${e.id}`),d.addEventListener("click",(()=>function(e,o){let c=t.removeTask(e);const i=document.querySelector("#general");for(n.updateGeneralList(c),n.updateProjectList(o);i.lastElementChild;)i.removeChild(i.lastElementChild);r(o),console.log(n.projectList),console.log(o)}(e.id,e.project))),c.append(i,l,s,a,d),o.appendChild(c),o}function r(t){let e=document.querySelector("#general").getAttribute("class");"inboxTab"===e?i():"todayTab"===e?l():"weekTab"===e?s():e===`project-${t}`&&0!==t&&u.displayProjectTasks(t)}function i(){let t=n.projectList[0].taskList;const o=document.querySelector("#general");for(o.classList.replace(o.getAttribute("class"),"inboxTab");o.lastElementChild;)o.removeChild(o.lastElementChild);t.forEach((t=>e(t,o))),console.log(t)}function l(){let t=n.projectList[0].taskList;const r=document.querySelector("#general");for(r.classList.replace(r.getAttribute("class"),"todayTab");r.lastElementChild;)r.removeChild(r.lastElementChild);t.filter((t=>c(o(t.duedate)))).forEach((t=>e(t,r)))}function s(){let t=n.projectList[0].taskList;const r=document.querySelector("#general");for(r.classList.replace(r.getAttribute("class"),"weekTab");r.lastElementChild;)r.removeChild(r.lastElementChild);t.filter((t=>a(o(t.duedate)))).forEach((t=>e(t,r)))}return{displayNewInput:function(){let t=n.projectList[0].taskList;e(t[t.length-1],document.querySelector("#general"))},displayInbox:i,displayDaily:l,displayWeekly:s,displayAllTask:e,updateDisplay:r}})(),u=(()=>{function t(t){n.projectList;const e=document.querySelector("#general");for(e.classList.replace(e.getAttribute("class"),`project-${t}`);e.lastElementChild;)e.removeChild(e.lastElementChild);n.grabCurrentProjectTasks(t).forEach((t=>d.displayAllTask(t,e)))}return{displayProject:function(){let e=n.projectList,o=e[e.length-1];const r=document.querySelector(".all-projects"),c=document.createElement("div"),i=document.createElement("div"),l=document.createElement("button");return c.classList.add(`project-${o.id}`),c.setAttribute("data-projectId",`${o.id}`),l.setAttribute("data-projectId",`${o.id}`),l.setAttribute("id",`project-${o.id}`),i.textContent=`${o.title}`,l.textContent="+",c.addEventListener("click",(e=>{e.stopPropagation(),t(o.id)})),l.addEventListener("click",(t=>{t.stopPropagation(),console.log("project id",n.grabProjectId(t));const e=document.querySelector("#main-form");n.grabProjectId(t),e.removeAttribute("hidden"),t.preventDefault()})),c.append(i,l),r.appendChild(c),r},displayProjectTasks:t}})(),m=(()=>{let e,r;function i(){const i=n.grabProjectList();e=document.getElementById("title").value,r=document.getElementById("description").value;let l=document.getElementById("date").value,s=document.getElementById("priority").value,d=function(){let t=n.projectList[0].taskList;return 0===t.length?0:t[t.length-1].id+1}(),u=n.grabCurrentProject();if(console.log(a(o(l))),console.log(c(o(l))),""!==e&&""!==r&&""!==l){const n=((t,e,n,o,r,c)=>({id:t,title:e,description:n,duedate:o,priority:r,project:c}))(d,e,r,l,s,u);console.log(n),0===u&&(i[0].taskList.push(n),console.log(i));for(let e=1;e<i.length;e++)i[e].id===u&&(t.addToList(n),i[e].taskList.push(n),console.log(i))}}function l(){document.getElementById("title").value="",e="",document.getElementById("description").value="",r="",document.getElementById("date").value="",document.getElementById("priority").value="Low"}return{createNewTask:i,initSubmitBtn:function(){document.querySelector("#submit").addEventListener("click",(t=>{!function(){const t=document.querySelector("#main-form"),o=document.querySelector("#newTask");if(i(),""!==e&&""!==r){let e=n.projectList[0].taskList,r=e[e.length-1].project;d.updateDisplay(r),l(),t.setAttribute("hidden",""),o.removeAttribute("hidden")}}(),t.preventDefault()}))},cancelTask:function(){const t=document.querySelector("#cancel"),e=document.querySelector("#main-form"),n=document.querySelector("#newTask");t.addEventListener("click",(t=>{l(),e.setAttribute("hidden",""),n.removeAttribute("hidden"),t.preventDefault()}))},openTaskCreator:function(){const t=document.querySelector("#newTask"),e=document.querySelector("#main-form");t.addEventListener("click",(o=>{n.grabProjectId(o),e.removeAttribute("hidden"),t.setAttribute("hidden",""),o.preventDefault()}))}}})();m.initSubmitBtn(),m.cancelTask(),m.openTaskCreator(),n.submitProject();const p=document.querySelector("#today"),f=document.querySelector("#weekly"),y=document.querySelector("#inbox");p.addEventListener("click",d.displayDaily),f.addEventListener("click",d.displayWeekly),y.addEventListener("click",d.displayInbox)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,