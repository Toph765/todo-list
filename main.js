(()=>{"use strict";const e=(()=>{let e=[];return{addToList:function(t){e.push(t),console.log(e)},TodoList:e,removeTask:function(t){return e=e.filter((e=>t!==e.id))}}})(),t=(e,t,n)=>({title:e,taskList:t,id:n}),n=(()=>{let n,o=[],r=e.TodoList;const c=t("General",r,0);o.push(c);let i=0;return{submitProject:function(){document.querySelector("#createProject").addEventListener("click",(e=>{e.preventDefault(),function(){n=document.querySelector("#projectTitle").value;const e=0===o.length?0:o[o.length-1].id+1;if(""!==n){const r=t(n,[],e);console.log(r),function(e){o.push(e),console.log(o)}(r)}}(),""!==n&&(u.displayProject(),document.querySelector("#projectTitle").value="",n="")}))},grabProjectId:function(e){let t=parseInt(e.target.getAttribute("data-projectId"));return i=t,i},grabCurrentProject:function(){return i},grabProjectList:function(){return o},projectList:o,updateGeneralList:function(e){return c.taskList=e,console.log(c.taskList),c},updateProjectList:function(e){let t=c.taskList.filter((t=>t.project===e));return console.log(t),0!==e?o.filter((t=>t.id===e))[0].taskList=t:void 0},grabCurrentProjectTasks:function(e){return console.log(o.filter((t=>t.id===e))[0].taskList),o.filter((t=>t.id===e))[0].taskList}}})();function o(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}function r(e){const t=o(e);return t.setHours(0,0,0,0),t}function c(e){return t=e,n=Date.now(),+r(t)==+r(n);var t,n}let i={};function l(){return i}function s(e,t){const n=l(),r=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,c=o(e),i=c.getDay(),s=(i<r?7:0)+i-r;return c.setDate(c.getDate()-s),c.setHours(0,0,0,0),c}function a(e,t){return function(e,t,n){return+s(e,n)==+s(t,n)}(e,Date.now(),t)}const d=(()=>{function t(t,o){const c=document.createElement("div");c.setAttribute("data-taskId",`${t.id}`),c.classList.add("task");const s=document.createElement("div"),a=document.createElement("div"),d=document.createElement("div"),m=document.createElement("div"),p=document.createElement("button");return s.textContent=`Title: ${t.title}`,a.textContent=`Due Date: ${t.duedate}`,d.textContent=`Description: ${t.description}`,m.textContent=`Priority: ${t.priority}`,p.textContent="delete",p.setAttribute("data-taskId",`${t.id}`),p.addEventListener("click",(()=>function(t,o){let c=e.removeTask(t);const s=document.querySelector("#general");for(n.updateGeneralList(c),n.updateProjectList(o);s.lastElementChild;)s.removeChild(s.lastElementChild);(function(e){let t=document.querySelector("#general").getAttribute("class");"inboxTab"===t?r():"todayTab"===t?i():"weekTab"===t?l():t===`project-${e}`&&0!==e&&u.displayProjectTasks(e)})(o),console.log(n.projectList),console.log(o)}(t.id,t.project))),c.append(s,a,d,m,p),o.appendChild(c),o}function r(){let e=n.projectList[0].taskList;const o=document.querySelector("#general");for(o.classList.replace(o.getAttribute("class"),"inboxTab");o.lastElementChild;)o.removeChild(o.lastElementChild);e.forEach((e=>t(e,o))),console.log(e)}function i(){let e=n.projectList[0].taskList;const r=document.querySelector("#general");for(r.classList.replace(r.getAttribute("class"),"todayTab");r.lastElementChild;)r.removeChild(r.lastElementChild);e.filter((e=>c(o(e.duedate)))).forEach((e=>t(e,r)))}function l(){let e=n.projectList[0].taskList;const r=document.querySelector("#general");for(r.classList.replace(r.getAttribute("class"),"weekTab");r.lastElementChild;)r.removeChild(r.lastElementChild);e.filter((e=>a(o(e.duedate)))).forEach((e=>t(e,r)))}return{displayNewInput:function(){let e=n.projectList[0].taskList;t(e[e.length-1],document.querySelector("#general"))},displayInbox:r,displayDaily:i,displayWeekly:l,displayAllTask:t}})(),u=(()=>{function e(e){n.projectList;const t=document.querySelector("#general");for(t.classList.replace(t.getAttribute("class"),`project-${e}`);t.lastElementChild;)t.removeChild(t.lastElementChild);let o=n.grabCurrentProjectTasks(e);console.log(o),console.log(e),o.forEach((e=>d.displayAllTask(e,t)))}return{displayProject:function(){let t=n.projectList,o=t[t.length-1];const r=document.querySelector(".all-projects"),c=document.createElement("div"),i=document.createElement("div"),l=document.createElement("button");return c.classList.add(`project-${o.id}`),c.setAttribute("data-projectId",`${o.id}`),l.setAttribute("data-projectId",`${o.id}`),l.setAttribute("id",`project-${o.id}`),i.textContent=`${o.title}`,l.textContent="+",c.addEventListener("click",(t=>{t.stopPropagation(),e(o.id)})),l.addEventListener("click",(e=>{e.stopPropagation(),console.log("project id",n.grabProjectId(e));const t=document.querySelector("#main-form");n.grabProjectId(e),t.removeAttribute("hidden"),e.preventDefault()})),c.append(i,l),r.appendChild(c),r},displayProjectTasks:e}})(),m=(()=>{let t,r;function i(){const i=n.grabProjectList();t=document.getElementById("title").value,r=document.getElementById("description").value;let l=document.getElementById("date").value,s=document.getElementById("priority").value,d=function(){let e=n.projectList[0].taskList;return 0===e.length?0:e[e.length-1].id+1}(),u=n.grabCurrentProject();if(console.log(a(o(l))),console.log(c(o(l))),""!==t&&""!==r&&""!==l){const n=((e,t,n,o,r,c)=>({id:e,title:t,description:n,duedate:o,priority:r,project:c}))(d,t,r,l,s,u);console.log(n),0===u&&(i[0].taskList.push(n),console.log(i));for(let t=1;t<i.length;t++)i[t].id===u&&(e.addToList(n),i[t].taskList.push(n),console.log(i))}}function l(){document.getElementById("title").value="",t="",document.getElementById("description").value="",r="",document.getElementById("date").value="",document.getElementById("priority").value="Low"}return{createNewTask:i,initSubmitBtn:function(){document.querySelector("#submit").addEventListener("click",(e=>{!function(){const e=document.querySelector("#main-form"),n=document.querySelector("#newTask");i(),""!==t&&""!==r&&(d.displayNewInput(),l(),e.setAttribute("hidden",""),n.removeAttribute("hidden"))}(),e.preventDefault()}))},cancelTask:function(){const e=document.querySelector("#cancel"),t=document.querySelector("#main-form"),n=document.querySelector("#newTask");e.addEventListener("click",(e=>{l(),t.setAttribute("hidden",""),n.removeAttribute("hidden"),e.preventDefault()}))},openTaskCreator:function(){const e=document.querySelector("#newTask"),t=document.querySelector("#main-form");e.addEventListener("click",(o=>{n.grabProjectId(o),t.removeAttribute("hidden"),e.setAttribute("hidden",""),o.preventDefault()}))}}})();m.initSubmitBtn(),m.cancelTask(),m.openTaskCreator(),n.submitProject();const p=document.querySelector("#today"),f=document.querySelector("#weekly"),g=document.querySelector("#inbox");p.addEventListener("click",d.displayDaily),f.addEventListener("click",d.displayWeekly),g.addEventListener("click",d.displayInbox)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,